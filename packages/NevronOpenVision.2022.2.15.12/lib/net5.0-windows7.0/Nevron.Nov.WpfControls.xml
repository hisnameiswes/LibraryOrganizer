<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nevron.Nov.WpfControls</name>
    </assembly>
    <members>
        <member name="T:Nevron.Nov.WpfControls.NLinearBarcodeControl">
            <summary>
            Represents an NLinearBarcodeControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NLinearBarcodeControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.Symbology">
            <Summary>Gets/Sets the symbology of this linear barcode.<para />Possible values are:<para /> - Codabar: Codabar symbology.<para /> - Code 11: Code 11 symbology.<para /> - Code 39: Code 39 symbology.<para /> - Code 39 Extended: Code 39 extended symbology.<para /> - Code 93: Code 93 symbology.<para /> - Code 128: Code 128 Auto symbology.<para /> - Code 128A: Code 128 subset A symbology.<para /> - Code 128B: Code 128 subset B symbology.<para /> - Code 128C: Code 128 subset C symbology.<para /> - EAN8: EAN8 symbology.<para /> - EAN13: EAN13 symbology.<para /> - FIM: Facing Identification Mark symbology.<para /> - Interleaved 2of 5: Interleaved 2 of 5 symbology.<para /> - ISBN: ISBN symbology.<para /> - ITF14: ITF14 symbology.<para /> - JAN13: JAN13 symbology.<para /> - MS I_ 2 Mod 10: MSI 2 modulo 10 symbology.<para /> - MS I_ Mod 10: MSI modulo 10 symbology.<para /> - MS I_ Mod 11: MSI modulo 11 symbology.<para /> - MS I_ Mod 1 1_ Mod 10: MSI modulo 11 / modulo 10 symbology.<para /> - Pharmacode: Pharmaceutical Binary Code (Pharmacode) symbology.<para /> - Post Net: PostNet symbology.<para /> - Standard 2of 5: Standard 2 of 5 symbology.<para /> - Telepen: Telepen symbology.<para /> - UPCA: Universal Product Code A (UPCA) symbology.<para /> - UPCE: Zero-suppressed Universal Product Code (UPCE) symbology.<para /> - UP C_ Supplemental_ 2 Digit: UPC-2 symbology - a 2-digit supplement to the UPC used to indicate the edition of a magazine or periodical.<para /> - UP C_ Supplemental_ 5 Digit: UPC-5 symbology - a 5-digit supplement to the UPC used to indicate suggested retail price for books.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.SizeMode">
            <Summary>Determines the way the barcode is sized in its slot.<para />Possible values are:<para /> - Scale: The barcode size is calculated based on its Scale property.<para /> - Fit: The barcode is drawn with such scale so that it fits the bounds of the widget (the Scale property is not taken into account).<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.Scale">
            <Summary>Gets/Sets the scale of the barcode. Valid only if the SizeMode is set to Scale.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.Text">
            <Summary>Gets/Sets the text encoded by this barcode.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearBarcodeControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NMatrixBarcodeControl">
            <summary>
            Represents an NMatrixBarcodeControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NMatrixBarcodeControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.ErrorCorrection">
            <Summary>Gets/Sets the error correction level of this matrix barcode. Currently taken into account only by the QR Code barcode symbology.<para />Possible values are:<para /> - Low: 7% of codewords can be restored.<para /> - Medium: 15% of codewords can be restored.<para /> - Quartile: 25% of codewords can be restored.<para /> - High: 30% of codewords can be restored.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.Symbology">
            <Summary>Gets/Sets the symbology of this matrix barcode.<para />Possible values are:<para /> - Data Matrix: Data Matrix symbology.<para /> - Qr Code: QR Code symbology.<para /> - Pdf 417: PDF 417 symbology.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.SizeMode">
            <Summary>Determines the way the barcode is sized in its slot.<para />Possible values are:<para /> - Scale: The barcode size is calculated based on its Scale property.<para /> - Fit: The barcode is drawn with such scale so that it fits the bounds of the widget (the Scale property is not taken into account).<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.Scale">
            <Summary>Gets/Sets the scale of the barcode. Valid only if the SizeMode is set to Scale.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.Text">
            <Summary>Gets/Sets the text encoded by this barcode.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMatrixBarcodeControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NChartViewControl">
            <summary>
            Represents an NChartViewControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NChartViewControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.Document">
            <Summary>Gets or sets the document displayed by this view.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.ReadOnly">
            <Summary>Gets or sets whether the user is able to modify the document visually.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.IsScrolling">
            <Summary>Gets whether the viewport is currently being continuosly scrolled, either by dragging the scrollbar thumbs or by pressing the scrollbar arrows. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.WindowX">
            <Summary>Gets the window X coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.WindowY">
            <Summary>Gets the window Y coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.WindowWidth">
            <Summary>Gets the window Width. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.WindowHeight">
            <Summary>Gets the window Height. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.WindowBackgroundFill">
            <Summary>Gets or sets the background of the window area.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NChartViewControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NLinearGaugeControl">
            <summary>
            Represents an NLinearGaugeControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NLinearGaugeControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinearGaugeControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NNumericLedDisplayControl">
            <summary>
            Represents an NNumericLedDisplayControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NNumericLedDisplayControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericLedDisplayControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NRadialGaugeControl">
            <summary>
            Represents an NRadialGaugeControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NRadialGaugeControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadialGaugeControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NDrawingViewControl">
            <summary>
            Represents an NDrawingViewControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NDrawingViewControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.WidgetContextMenu">
            <Summary>Gets or sets the context menu builder which is responsible for creating context menus and popup-us for selected items.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.ViewportPadding">
            <Summary>Gets or sets the padding applied to the viewport in which the drawing active page is displayed.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.SpellChecker">
            <Summary>Gets the spell checker attached to the view.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.FindTextSettings">
            <Summary>Gets the text find settings</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.ReplaceTextSettings">
            <Summary>Gets the text replace settings</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.HScrollMode">
            <Summary>Gets or sets the scroll policy, which specifies the visibility of the H scrollbar<para />Possible values are:<para /> - Never: The scrolling is never allowed.<para /> - Always: The scrolling is always allowed.<para /> - When Needed: The scrolling is allowed when needed.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.VScrollMode">
            <Summary>Gets or sets the scroll policy, which specifies the visibility of the Y scrollbar<para />Possible values are:<para /> - Never: The scrolling is never allowed.<para /> - Always: The scrolling is always allowed.<para /> - When Needed: The scrolling is allowed when needed.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.NoScrollHAlign">
            <Summary>Gets or sets the horizontal content control alignment, when a horizontal scrollbar is not, or must not be displayed.<para />Possible values are:<para /> - None: The viewport is not horizontally aligned. The viewport origin is used.<para /> - Center: The viewport is horizontally inside the window.<para /> - Left: The viewport left side is aligned to the window left side.<para /> - Right: The viewport right side is aligned to the window right side.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.NoScrollVAlign">
            <Summary>Gets or sets the vertical content control alignment, when a vertical scrollbar is not, or must not be displayed.<para />Possible values are:<para /> - None: The viewport is not vertically aligned. The viewport origin is used.<para /> - Center: The viewport is vertically inside the window.<para /> - Top: The viewport top side is aligned to the window top side.<para /> - Bottom: The viewport bottom side is aligned to the window bottom side.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.SmallHScrollChange">
            <Summary>Gets or sets the small H scroll change</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.SmallVScrollChange">
            <Summary>Gets or sets the small V scroll change</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.Document">
            <Summary>Gets or sets the document displayed by this view.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.ReadOnly">
            <Summary>Gets or sets whether the user is able to modify the document visually.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.IsScrolling">
            <Summary>Gets whether the viewport is currently being continuosly scrolled, either by dragging the scrollbar thumbs or by pressing the scrollbar arrows. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.WindowX">
            <Summary>Gets the window X coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.WindowY">
            <Summary>Gets the window Y coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.WindowWidth">
            <Summary>Gets the window Width. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.WindowHeight">
            <Summary>Gets the window Height. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.WindowBackgroundFill">
            <Summary>Gets or sets the background of the window area.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl">
            <summary>
            Represents an NDrawingViewWithCommandBarsControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithCommandBarsControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl">
            <summary>
            Represents an NDrawingViewWithRibbonControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDrawingViewWithRibbonControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NLibraryBrowserControl">
            <summary>
            Represents an NLibraryBrowserControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NLibraryBrowserControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.LibraryViewType">
            <Summary>Gets or sets the type of view that needs to be used for viewing the libraries.<para />Possible values are:<para /> - List: Small icons, text on the right<para /> - Icons: Normal icons, text on the right<para /> - Thumbnails: Large icons, text on the bottom<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.LibraryDisplayOrder">
            <Summary>Gets or sets the display order in which the libraries are viewed.<para />Possible values are:<para /> - Default: Library items are displayed in their declaration order.<para /> - Name Ascending: Library items are displayed in name ascending order.<para /> - Name Descending: Library items are displayed in name descending order.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.HandleAutoConnect">
            <Summary>Gets or sets whether the library browser handles the AutoConnect event of the drawing view.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.SearchManager">
            <Summary>Gets the library info manager.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.Mode">
            <Summary>Gets or sets the library browser mode.<para />Possible values are:<para /> - View Libraries: View libraries.<para /> - Search Libraries: Search libraries.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryBrowserControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NLibraryViewControl">
            <summary>
            Represents an NLibraryViewControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NLibraryViewControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.WidgetContextMenu">
            <Summary>Gets/Sets the context menu builder which is responsible for creating context menus and popup-us for selected items.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.ShowDropShapesPrompt">
            <Summary>Gets or sets whether the view shows a Drop Shapes prompt.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.HScrollMode">
            <Summary>Gets or sets the scroll policy, which specifies the visibility of the H scrollbar<para />Possible values are:<para /> - Never: The scrolling is never allowed.<para /> - Always: The scrolling is always allowed.<para /> - When Needed: The scrolling is allowed when needed.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.VScrollMode">
            <Summary>Gets or sets the scroll policy, which specifies the visibility of the Y scrollbar<para />Possible values are:<para /> - Never: The scrolling is never allowed.<para /> - Always: The scrolling is always allowed.<para /> - When Needed: The scrolling is allowed when needed.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.NoScrollHAlign">
            <Summary>Gets or sets the horizontal content control alignment, when a horizontal scrollbar is not, or must not be displayed.<para />Possible values are:<para /> - None: The viewport is not horizontally aligned. The viewport origin is used.<para /> - Center: The viewport is horizontally inside the window.<para /> - Left: The viewport left side is aligned to the window left side.<para /> - Right: The viewport right side is aligned to the window right side.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.NoScrollVAlign">
            <Summary>Gets or sets the vertical content control alignment, when a vertical scrollbar is not, or must not be displayed.<para />Possible values are:<para /> - None: The viewport is not vertically aligned. The viewport origin is used.<para /> - Center: The viewport is vertically inside the window.<para /> - Top: The viewport top side is aligned to the window top side.<para /> - Bottom: The viewport bottom side is aligned to the window bottom side.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.SmallHScrollChange">
            <Summary>Gets or sets the small H scroll change</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.SmallVScrollChange">
            <Summary>Gets or sets the small V scroll change</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.Document">
            <Summary>Gets or sets the document displayed by this view.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.ReadOnly">
            <Summary>Gets or sets whether the user is able to modify the document visually.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.IsScrolling">
            <Summary>Gets whether the viewport is currently being continuosly scrolled, either by dragging the scrollbar thumbs or by pressing the scrollbar arrows. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.WindowX">
            <Summary>Gets the window X coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.WindowY">
            <Summary>Gets the window Y coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.WindowWidth">
            <Summary>Gets the window Width. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.WindowHeight">
            <Summary>Gets the window Height. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.WindowBackgroundFill">
            <Summary>Gets or sets the background of the window area.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLibraryViewControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NPanAndZoomViewControl">
            <summary>
            Represents an NPanAndZoomViewControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NPanAndZoomViewControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.SideWidth">
            <Summary>Gets or sets the width of the viewport sides</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.CornerWidth">
            <Summary>Gets or sets the width of the viewport corners</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.BandStroke">
            <Summary>Gets/Sets the value of the BandStroke property.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPanAndZoomViewControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NTableGridViewControl">
            <summary>
            Represents an NTableGridViewControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NTableGridViewControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.WidgetContextMenu">
            <Summary>Gets or sets the factory that produces context menus for this view</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.Document">
            <Summary>Gets or sets the document displayed by this view.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.ReadOnly">
            <Summary>Gets or sets whether the user is able to modify the document visually.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.IsScrolling">
            <Summary>Gets whether the viewport is currently being continuosly scrolled, either by dragging the scrollbar thumbs or by pressing the scrollbar arrows. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.WindowX">
            <Summary>Gets the window X coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.WindowY">
            <Summary>Gets the window Y coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.WindowWidth">
            <Summary>Gets the window Width. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.WindowHeight">
            <Summary>Gets the window Height. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.WindowBackgroundFill">
            <Summary>Gets or sets the background of the window area.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableGridViewControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NTreeGridViewControl">
            <summary>
            Represents an NTreeGridViewControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NTreeGridViewControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.WidgetContextMenu">
            <Summary>Gets or sets the factory that produces context menus for this view</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.Document">
            <Summary>Gets or sets the document displayed by this view.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.ReadOnly">
            <Summary>Gets or sets whether the user is able to modify the document visually.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.IsScrolling">
            <Summary>Gets whether the viewport is currently being continuosly scrolled, either by dragging the scrollbar thumbs or by pressing the scrollbar arrows. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.WindowX">
            <Summary>Gets the window X coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.WindowY">
            <Summary>Gets the window Y coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.WindowWidth">
            <Summary>Gets the window Width. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.WindowHeight">
            <Summary>Gets the window Height. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.WindowBackgroundFill">
            <Summary>Gets or sets the background of the window area.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeGridViewControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NScheduleViewControl">
            <summary>
            Represents an NScheduleViewControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NScheduleViewControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.WidgetContextMenu">
            <Summary>Gets/Sets the context menu factory of the schedule view. If set to null, context menu will not be displayed.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.NotificationCheckInterval">
            <Summary>Gets/Sets the interval (in seconds) at which to check for notifications. By default set to 0, which means that the schedule will not check for and show any notifications.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.Document">
            <Summary>Gets or sets the document displayed by this view.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.ReadOnly">
            <Summary>Gets or sets whether the user is able to modify the document visually.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.IsScrolling">
            <Summary>Gets whether the viewport is currently being continuosly scrolled, either by dragging the scrollbar thumbs or by pressing the scrollbar arrows. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.WindowX">
            <Summary>Gets the window X coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.WindowY">
            <Summary>Gets the window Y coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.WindowWidth">
            <Summary>Gets the window Width. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.WindowHeight">
            <Summary>Gets the window Height. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.WindowBackgroundFill">
            <Summary>Gets or sets the background of the window area.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl">
            <summary>
            Represents an NScheduleViewWithCommandBarsControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithCommandBarsControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl">
            <summary>
            Represents an NScheduleViewWithRibbonControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScheduleViewWithRibbonControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NRichTextViewControl">
            <summary>
            Represents an NRichTextViewControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NRichTextViewControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.ViewSettings">
            <Summary>Gets the view settingss</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.EditSettings">
            <Summary>Gets the edit settingss</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.SpellChecker">
            <Summary>Gets the spell checker attached to the view</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.AcceptsTab">
            <Summary>Gets or sets whether tab characters are accepted as input.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.FindSettings">
            <Summary>Gets the find settings</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.ReplaceSettings">
            <Summary>Gets the replace settings</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.GotoSettings">
            <Summary>Gets the goto settings</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.ContentBackgroundFill">
            <Summary>Gets or sets the content background fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.HScrollMode">
            <Summary>Gets or sets the scroll mode, which specifies the visibility of the H scrollbar<para />Possible values are:<para /> - Never: The scrolling is never allowed.<para /> - Always: The scrolling is always allowed.<para /> - When Needed: The scrolling is allowed when needed.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.VScrollMode">
            <Summary>Gets or sets the scroll mode, which specifies the visibility of the Y scrollbar<para />Possible values are:<para /> - Never: The scrolling is never allowed.<para /> - Always: The scrolling is always allowed.<para /> - When Needed: The scrolling is allowed when needed.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.Document">
            <Summary>Gets or sets the document displayed by this view.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.ReadOnly">
            <Summary>Gets or sets whether the user is able to modify the document visually.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.IsScrolling">
            <Summary>Gets whether the viewport is currently being continuosly scrolled, either by dragging the scrollbar thumbs or by pressing the scrollbar arrows. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.WindowX">
            <Summary>Gets the window X coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.WindowY">
            <Summary>Gets the window Y coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.WindowWidth">
            <Summary>Gets the window Width. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.WindowHeight">
            <Summary>Gets the window Height. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.WindowBackgroundFill">
            <Summary>Gets or sets the background of the window area.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl">
            <summary>
            Represents an NRichTextViewWithCommandBarsControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithCommandBarsControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl">
            <summary>
            Represents an NRichTextViewWithRibbonControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRichTextViewWithRibbonControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NAutoCompleteBoxControl">
            <summary>
            Represents an NAutoCompleteBoxControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.CaseSensitive">
            <Summary>Determines whether the auto complete suggestions are case sensitive or not. By default set to false (i.e. not case sensitive).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.StringMatchMode">
            <Summary>Gets or sets the string match mode that together with the search string entered in this text box determines the visible auto complete list box items.<para />Possible values are:<para /> - Contains: Matches all strings that contain a given substring.<para /> - Starts with: Matches all strings that start with a given substring.<para /> - Word Starts with: Matches all strings that contain a word starting with a given substring.<para /> - Ends with: Matches all strings that end with a given substring.<para /> - Word Ends with: Matches all strings that contains a word ending with a given substring.<para /> - Contains Any Word: Matches all strings that contain a word starting with one of the words of a given substring and orders the matched strings by the number of matched words.<para /> - Contains All Words: Matches all strings that contain all words from a given other string.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.IsPopupOpened">
            <Summary>Gets whether the hosted popup window is currently opened or not. The value of this property is automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.MaxPopupHeight">
            <Summary>Gets or sets the maximum height of the popup window.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.MaxPopupWidth">
            <Summary>Gets or sets the maximum width of the popup window.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.PopupXResize">
            <Summary>Gets or sets the X resizing of the popup.<para />Possible values are:<para /> - Desired: The popup width/height is equal to its desired width/height<para /> - Parent: The popup width/height is equal to the popup parent width/height<para /> - Max of Desired and Parent: The popup width/height is the maximum of the popup parent width/height and the popup desired width/height.<para /> - Min of Desired and Parent: The popup width/height is the minimum of the popup parent width/height and the popup desired width/height.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.PopupYResize">
            <Summary>Gets or sets the Y resizing of the popup.<para />Possible values are:<para /> - Desired: The popup width/height is equal to its desired width/height<para /> - Parent: The popup width/height is equal to the popup parent width/height<para /> - Max of Desired and Parent: The popup width/height is the maximum of the popup parent width/height and the popup desired width/height.<para /> - Min of Desired and Parent: The popup width/height is the minimum of the popup parent width/height and the popup desired width/height.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.PopupXPosition">
            <Summary>Gets or sets the X positioning of the popup relatively to this element screen bounds.<para />Possible values are:<para /> - Automatic: The popup X position is automatically determined by the popup host.<para /> - Left: The popup is displayed on the left side of the parent<para /> - Right: The popup is displayed on the right side of the parent<para /> - Align Lefts: Aligns the popup left side with the parent left side.<para /> - Align Rights: Aligns the popup right side with the parent right side.<para /> - Align Centers: Aligns the popup center with the parent center.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.PopupYPosition">
            <Summary>Gets or sets the Y positioning of the popup relatively to this element screen bounds.<para />Possible values are:<para /> - Automatic: The popup Y position is automatically determined by the popup host.<para /> - Up: The popup is displayed on the top side of the parent<para /> - Down: The popup is displayed on the bottom side of the parent<para /> - Align Tops: Aligns the popup top side with the parent top side.<para /> - Align Bottoms: Aligns the popup bottom side with the parent bottom side.<para /> - Align Centers: Aligns the popup center with the parent center.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.PopupOpenDelay">
            <Summary>Gets or sets the delay (in milliseconds) that must ellapse prior to deffered popup open.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.PopupCloseDelay">
            <Summary>Gets or sets the delay (in milliseconds) that must ellapse prior to deffered popup close.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NAutoCompleteBoxControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NBorderSplitButtonControl">
            <summary>
            Represents an NBorderSplitButtonControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NBorderSplitButtonControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.SelectedValue">
            <Summary>Gets or sets the selected value. The selected value is updated from the result of the drop down editing.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.HasAutomaticButton">
            <Summary>Gets or sets whether the drop down shows an Automatic toggle button. When the button is checked, the selected value Automatic flag is raised to true. By default set to true.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.HasNoneButton">
            <Summary>Gets or sets whether the drop down shows a None toggle button. When the button is checked, the selected value is updated to the value provided by the GetNoneValue protected method. By default set to true.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.HasMoreOptionsButton">
            <Summary>Gets or sets whether the drop down shows a More Options button. By default set to true.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.Image">
            <Summary>Gets or sets the image shown in the action button of this split button.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.MoreOptionsImage">
            <Summary>Gets or sets the image shown in the "More Options..." button of the split button popup.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.DropDownButtonPosition">
            <Summary>Gets or sets position of the drop down button. By default set to right.<para />Possible values are:<para /> - Right: The drop down button is positioned to the right of the drop down edit content.<para /> - Bottom: The drop down button is positioned under the drop down edit content.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.WindowX">
            <Summary>Gets or sets the window X coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.WindowY">
            <Summary>Gets or sets the window Y coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.WindowWidth">
            <Summary>Gets or sets the window Width. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.WindowHeight">
            <Summary>Gets or sets the window Height. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.WindowBackgroundFill">
            <Summary>Gets or sets the background of the window area.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.IsPopupOpened">
            <Summary>Gets whether the hosted popup window is currently opened or not. The value of this property is automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.MaxPopupHeight">
            <Summary>Gets or sets the maximum height of the popup window.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.MaxPopupWidth">
            <Summary>Gets or sets the maximum width of the popup window.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.PopupXResize">
            <Summary>Gets or sets the X resizing of the popup.<para />Possible values are:<para /> - Desired: The popup width/height is equal to its desired width/height<para /> - Parent: The popup width/height is equal to the popup parent width/height<para /> - Max of Desired and Parent: The popup width/height is the maximum of the popup parent width/height and the popup desired width/height.<para /> - Min of Desired and Parent: The popup width/height is the minimum of the popup parent width/height and the popup desired width/height.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.PopupYResize">
            <Summary>Gets or sets the Y resizing of the popup.<para />Possible values are:<para /> - Desired: The popup width/height is equal to its desired width/height<para /> - Parent: The popup width/height is equal to the popup parent width/height<para /> - Max of Desired and Parent: The popup width/height is the maximum of the popup parent width/height and the popup desired width/height.<para /> - Min of Desired and Parent: The popup width/height is the minimum of the popup parent width/height and the popup desired width/height.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.PopupXPosition">
            <Summary>Gets or sets the X positioning of the popup relatively to this element screen bounds.<para />Possible values are:<para /> - Automatic: The popup X position is automatically determined by the popup host.<para /> - Left: The popup is displayed on the left side of the parent<para /> - Right: The popup is displayed on the right side of the parent<para /> - Align Lefts: Aligns the popup left side with the parent left side.<para /> - Align Rights: Aligns the popup right side with the parent right side.<para /> - Align Centers: Aligns the popup center with the parent center.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.PopupYPosition">
            <Summary>Gets or sets the Y positioning of the popup relatively to this element screen bounds.<para />Possible values are:<para /> - Automatic: The popup Y position is automatically determined by the popup host.<para /> - Up: The popup is displayed on the top side of the parent<para /> - Down: The popup is displayed on the bottom side of the parent<para /> - Align Tops: Aligns the popup top side with the parent top side.<para /> - Align Bottoms: Aligns the popup bottom side with the parent bottom side.<para /> - Align Centers: Aligns the popup center with the parent center.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.PopupOpenDelay">
            <Summary>Gets or sets the delay (in milliseconds) that must ellapse prior to deffered popup open.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.PopupCloseDelay">
            <Summary>Gets or sets the delay (in milliseconds) that must ellapse prior to deffered popup close.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NBorderSplitButtonControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NButtonControl">
            <summary>
            Represents an NButtonControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NButtonControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.WindowResult">
            <Summary>Gets or sets the dialog result<para />Possible values are:<para /> - None: The result is undefined.<para /> - OK: The OK button was clicked.<para /> - Cancel: The Cancel button was clicked.<para /> - Abort: The Abort button was clicked.<para /> - Retry: The Retry button was clicked.<para /> - Ignore: The Ignore button was clicked.<para /> - Yes: The Yes button was clicked.<para /> - No: The No button was clicked.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.ClickMode">
            <Summary>Gets or sets the click mode of the button<para />Possible values are:<para /> - Press: The button is clicked when the button is pressed<para /> - Release: The button is clicked when the button is released<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.IsPressed">
            <Summary>Gets whether the button is pressed. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NButtonControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NCalendarControl">
            <summary>
            Represents an NCalendarControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NCalendarControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.SelectedDate">
            <Summary>Gets or sets the selected date. When the selected date has changed the calendar automatically changes the ViewRange to DaysOfMonth, and navigates to the selected date. The current date also becomes the selected date.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.CurrentDate">
            <Summary>Gets or sets the current date. When the current date changes the calendar navigates the current view range to the current date, without changing the selected date.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.ViewRange">
            <Summary>Gets or sets the current view range of the calendar.<para />Possible values are:<para /> - Days of Month: Days of month view range.<para /> - Months of Year: Months of year view range.<para /> - Years of Decade: Years of decade view range.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.CultureName">
            <Summary>Gets or sets the name of the culture that should to be used when displaying this schedule. By default set to null, which means that the culture of the current thread will be used.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.HeaderFormatString">
            <Summary>Gets or sets the header format string, that defines the text representation of the current date, when the calender picker view range is set to days of months.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.MonthFormatMode">
            <Summary>Gets or sets the format mode in which the month picker displays the months. By default set to AbbreviatedMonthName.<para />Possible values are:<para /> - Month Number: Month number<para /> - Month Number with Leading Zero: Month number with leading zero<para /> - Abbreviated Month Name: Abbreviated Month Name (e.g. Dec)<para /> - Full Month Name: Full month name (e.g. December)<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.DayOfWeekFormatMode">
            <Summary>Gets or sets the format mode in which the day picker displays the days of the week. By default set to AbbreviatedDayName.<para />Possible values are:<para /> - Abbreviated Day Name: The abbreviated day name (e.g. Sun)<para /> - Full Day Name: The full day name (e.g. Sunday)<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.HighlightToday">
            <Summary>Determines whether to highlight today's date or not.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.HeaderContentRelation">
            <Summary>Gets or sets the relation between the header and the content in the area of this widget.<para />Possible values are:<para /> - Overlay: Specifies that header and content share the same space.<para /> - Header above Content: Specifies that header is displayed vertically above content.<para /> - Content above Header: Specifies that content is displayed vertically above header.<para /> - Header before Content: Specifies that header is displayed horizontally before content.<para /> - Content before Header: Specifies that content is displayed horizontally before header.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.Spacing">
            <Summary>Gets or sets the spacing between the header and content elemnets</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.ContentPadding">
            <Summary>Gets or sets the padding applied to the content element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCalendarControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NCheckBoxControl">
            <summary>
            Represents an NCheckBoxControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NCheckBoxControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.Indeterminate">
            <Summary>Gets/Sets whether the check box is in an indetermined state, i.e. neighter checked, nor unchecked. By default set to false.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.ClickOnSymbol">
            <Summary>Gets/Sets whether the check box is toggled when the user clicks on the symbol only. By default set to false, which means that the check box is toggled when the user clicks either its symbol or its content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.SymbolContentRelation">
            <Summary>Gets or sets the symbol/content relation of this button.<para />Possible values are:<para /> - Overlay: Specifies that the symbol and the content share the same space.<para /> - Symbol above Content: Specifies that the symbol is displayed vertically above the content.<para /> - Content above Symbol: Specifies that the content is displayed vertically above the symbol.<para /> - Symbol before Content: Specifies that the symbol is displayed horizontally before the content.<para /> - Content before Symbol: Specifies that the content is displayed horizontally before the symbol.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.Spacing">
            <Summary>Gets or sets the spacing between the symbol and the content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.Checked">
            <Summary>Gets or sets the checked state of the toggle button.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.ToggleCheckedOnClick">
            <Summary>Determines whether to toggle the checked state of the toggle button when clicked. By default set to true.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.ClickMode">
            <Summary>Gets or sets the click mode of the button<para />Possible values are:<para /> - Press: The button is clicked when the button is pressed<para /> - Release: The button is clicked when the button is released<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.IsPressed">
            <Summary>Gets whether the button is pressed. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NCheckBoxControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NColorBoxControl">
            <summary>
            Represents an NColorBoxControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NColorBoxControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.Palette">
            <Summary>Gets/Sets the palette of the color box.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.SelectedColor">
            <Summary>Gets or sets the selected color.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.ShowMoreColorsButton">
            <Summary>Gets or sets whether the more colors button must be displayed in the drop down.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.ShowOpacitySliderInDialog">
            <Summary>Gets or sets whether to show opacity slider in the "More Colors" dialog.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.PreviewSize">
            <Summary>Gets or sets the size of the color preview.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.PreviewStroke">
            <Summary>Gets or sets the stroking border of the color preview.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.PreviewMargins">
            <Summary>Gets or sets the margins of the color preview.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.DropDownButtonPosition">
            <Summary>Gets or sets position of the drop down button. By default set to right.<para />Possible values are:<para /> - Right: The drop down button is positioned to the right of the drop down edit content.<para /> - Bottom: The drop down button is positioned under the drop down edit content.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.WindowX">
            <Summary>Gets or sets the window X coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.WindowY">
            <Summary>Gets or sets the window Y coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.WindowWidth">
            <Summary>Gets or sets the window Width. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.WindowHeight">
            <Summary>Gets or sets the window Height. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.WindowBackgroundFill">
            <Summary>Gets or sets the background of the window area.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.IsPopupOpened">
            <Summary>Gets whether the hosted popup window is currently opened or not. The value of this property is automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.MaxPopupHeight">
            <Summary>Gets or sets the maximum height of the popup window.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.MaxPopupWidth">
            <Summary>Gets or sets the maximum width of the popup window.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.PopupXResize">
            <Summary>Gets or sets the X resizing of the popup.<para />Possible values are:<para /> - Desired: The popup width/height is equal to its desired width/height<para /> - Parent: The popup width/height is equal to the popup parent width/height<para /> - Max of Desired and Parent: The popup width/height is the maximum of the popup parent width/height and the popup desired width/height.<para /> - Min of Desired and Parent: The popup width/height is the minimum of the popup parent width/height and the popup desired width/height.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.PopupYResize">
            <Summary>Gets or sets the Y resizing of the popup.<para />Possible values are:<para /> - Desired: The popup width/height is equal to its desired width/height<para /> - Parent: The popup width/height is equal to the popup parent width/height<para /> - Max of Desired and Parent: The popup width/height is the maximum of the popup parent width/height and the popup desired width/height.<para /> - Min of Desired and Parent: The popup width/height is the minimum of the popup parent width/height and the popup desired width/height.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.PopupXPosition">
            <Summary>Gets or sets the X positioning of the popup relatively to this element screen bounds.<para />Possible values are:<para /> - Automatic: The popup X position is automatically determined by the popup host.<para /> - Left: The popup is displayed on the left side of the parent<para /> - Right: The popup is displayed on the right side of the parent<para /> - Align Lefts: Aligns the popup left side with the parent left side.<para /> - Align Rights: Aligns the popup right side with the parent right side.<para /> - Align Centers: Aligns the popup center with the parent center.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.PopupYPosition">
            <Summary>Gets or sets the Y positioning of the popup relatively to this element screen bounds.<para />Possible values are:<para /> - Automatic: The popup Y position is automatically determined by the popup host.<para /> - Up: The popup is displayed on the top side of the parent<para /> - Down: The popup is displayed on the bottom side of the parent<para /> - Align Tops: Aligns the popup top side with the parent top side.<para /> - Align Bottoms: Aligns the popup bottom side with the parent bottom side.<para /> - Align Centers: Aligns the popup center with the parent center.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.PopupOpenDelay">
            <Summary>Gets or sets the delay (in milliseconds) that must ellapse prior to deffered popup open.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.PopupCloseDelay">
            <Summary>Gets or sets the delay (in milliseconds) that must ellapse prior to deffered popup close.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NColorBoxControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NComboBoxControl">
            <summary>
            Represents an NComboBoxControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NComboBoxControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.SelectedIndex">
            <Summary>Gets or sets the selected index. To deselect the currently selected item, set the SelectedIndex to -1.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.DropDownStyle">
            <Summary>Gets or sets the drop down style of the combo box.<para />Possible values are:<para /> - Drop down: Specifies that the list is displayed by clicking the down arrow and that the text portion is editable. This means that the user can enter a new value and is not limited to selecting an existing value from the list.<para /> - Drop down List: Specifies that the list is displayed by clicking the down arrow and that the text portion is not editable. This means that the user cannot enter a new value. Only values already in the list can be selected. This is the default style.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.HScrollMode">
            <Summary>Gets or sets the horizontal scroll mode of the popup list box.<para />Possible values are:<para /> - Never: The scrolling is never allowed.<para /> - Always: The scrolling is always allowed.<para /> - When Needed: The scrolling is allowed when needed.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.VScrollMode">
            <Summary>Gets or sets the vertical scroll mode of the popup list box.<para />Possible values are:<para /> - Never: The scrolling is never allowed.<para /> - Always: The scrolling is always allowed.<para /> - When Needed: The scrolling is allowed when needed.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.WheelNavigationMode">
            <Summary>Gets or sets the scroll mode of the combo box items. By default set to Always.<para />Possible values are:<para /> - Always: The combo box always navigates through the items when the users rotates the mouse wheel over it.<para /> - Never: The combo box never navigates through the items when the users rotates the mouse wheel over it.<para /> - When Focused: The combo box navigates through the items when the users rotates the mouse wheel over it and the combo box is focused.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.DropDownButtonPosition">
            <Summary>Gets or sets position of the drop down button. By default set to right.<para />Possible values are:<para /> - Right: The drop down button is positioned to the right of the drop down edit content.<para /> - Bottom: The drop down button is positioned under the drop down edit content.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.WindowX">
            <Summary>Gets or sets the window X coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.WindowY">
            <Summary>Gets or sets the window Y coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.WindowWidth">
            <Summary>Gets or sets the window Width. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.WindowHeight">
            <Summary>Gets or sets the window Height. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.WindowBackgroundFill">
            <Summary>Gets or sets the background of the window area.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.IsPopupOpened">
            <Summary>Gets whether the hosted popup window is currently opened or not. The value of this property is automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.MaxPopupHeight">
            <Summary>Gets or sets the maximum height of the popup window.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.MaxPopupWidth">
            <Summary>Gets or sets the maximum width of the popup window.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.PopupXResize">
            <Summary>Gets or sets the X resizing of the popup.<para />Possible values are:<para /> - Desired: The popup width/height is equal to its desired width/height<para /> - Parent: The popup width/height is equal to the popup parent width/height<para /> - Max of Desired and Parent: The popup width/height is the maximum of the popup parent width/height and the popup desired width/height.<para /> - Min of Desired and Parent: The popup width/height is the minimum of the popup parent width/height and the popup desired width/height.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.PopupYResize">
            <Summary>Gets or sets the Y resizing of the popup.<para />Possible values are:<para /> - Desired: The popup width/height is equal to its desired width/height<para /> - Parent: The popup width/height is equal to the popup parent width/height<para /> - Max of Desired and Parent: The popup width/height is the maximum of the popup parent width/height and the popup desired width/height.<para /> - Min of Desired and Parent: The popup width/height is the minimum of the popup parent width/height and the popup desired width/height.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.PopupXPosition">
            <Summary>Gets or sets the X positioning of the popup relatively to this element screen bounds.<para />Possible values are:<para /> - Automatic: The popup X position is automatically determined by the popup host.<para /> - Left: The popup is displayed on the left side of the parent<para /> - Right: The popup is displayed on the right side of the parent<para /> - Align Lefts: Aligns the popup left side with the parent left side.<para /> - Align Rights: Aligns the popup right side with the parent right side.<para /> - Align Centers: Aligns the popup center with the parent center.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.PopupYPosition">
            <Summary>Gets or sets the Y positioning of the popup relatively to this element screen bounds.<para />Possible values are:<para /> - Automatic: The popup Y position is automatically determined by the popup host.<para /> - Up: The popup is displayed on the top side of the parent<para /> - Down: The popup is displayed on the bottom side of the parent<para /> - Align Tops: Aligns the popup top side with the parent top side.<para /> - Align Bottoms: Aligns the popup bottom side with the parent bottom side.<para /> - Align Centers: Aligns the popup center with the parent center.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.PopupOpenDelay">
            <Summary>Gets or sets the delay (in milliseconds) that must ellapse prior to deffered popup open.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.PopupCloseDelay">
            <Summary>Gets or sets the delay (in milliseconds) that must ellapse prior to deffered popup close.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NComboBoxControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NDateTimeBoxControl">
            <summary>
            Represents an NDateTimeBoxControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NDateTimeBoxControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.SelectedDate">
            <Summary>Gets or sets the currently selected date.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.CultureName">
            <Summary>Gets or sets the name of the culture that needs to be used when displaying this calendar. If set to an empty string, the default culture is used.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.Mode">
            <Summary>Gets or sets the date time format.<para />Possible values are:<para /> - Date: Shows a calendar for picking a date.<para /> - Time: Shows 3 numeric up/downs for picking hours, minutes and seconds.<para /> - Date and Time: Shows a calendar and 3 numeric up/downs for picking time.<para /> - Month and Year: Shows a combo box for selecting a month and a numeric up/down for selecting an year.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.Format">
            <Summary>Gets or sets the date/time format string.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.HasTodayButton">
            <Summary>Determines whether a "Show Today" button is shown or not.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.HighlightToday">
            <Summary>Determines whether to highlight today's date or not.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.DropDownButtonPosition">
            <Summary>Gets or sets position of the drop down button. By default set to right.<para />Possible values are:<para /> - Right: The drop down button is positioned to the right of the drop down edit content.<para /> - Bottom: The drop down button is positioned under the drop down edit content.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.WindowX">
            <Summary>Gets or sets the window X coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.WindowY">
            <Summary>Gets or sets the window Y coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.WindowWidth">
            <Summary>Gets or sets the window Width. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.WindowHeight">
            <Summary>Gets or sets the window Height. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.WindowBackgroundFill">
            <Summary>Gets or sets the background of the window area.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.IsPopupOpened">
            <Summary>Gets whether the hosted popup window is currently opened or not. The value of this property is automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.MaxPopupHeight">
            <Summary>Gets or sets the maximum height of the popup window.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.MaxPopupWidth">
            <Summary>Gets or sets the maximum width of the popup window.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.PopupXResize">
            <Summary>Gets or sets the X resizing of the popup.<para />Possible values are:<para /> - Desired: The popup width/height is equal to its desired width/height<para /> - Parent: The popup width/height is equal to the popup parent width/height<para /> - Max of Desired and Parent: The popup width/height is the maximum of the popup parent width/height and the popup desired width/height.<para /> - Min of Desired and Parent: The popup width/height is the minimum of the popup parent width/height and the popup desired width/height.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.PopupYResize">
            <Summary>Gets or sets the Y resizing of the popup.<para />Possible values are:<para /> - Desired: The popup width/height is equal to its desired width/height<para /> - Parent: The popup width/height is equal to the popup parent width/height<para /> - Max of Desired and Parent: The popup width/height is the maximum of the popup parent width/height and the popup desired width/height.<para /> - Min of Desired and Parent: The popup width/height is the minimum of the popup parent width/height and the popup desired width/height.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.PopupXPosition">
            <Summary>Gets or sets the X positioning of the popup relatively to this element screen bounds.<para />Possible values are:<para /> - Automatic: The popup X position is automatically determined by the popup host.<para /> - Left: The popup is displayed on the left side of the parent<para /> - Right: The popup is displayed on the right side of the parent<para /> - Align Lefts: Aligns the popup left side with the parent left side.<para /> - Align Rights: Aligns the popup right side with the parent right side.<para /> - Align Centers: Aligns the popup center with the parent center.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.PopupYPosition">
            <Summary>Gets or sets the Y positioning of the popup relatively to this element screen bounds.<para />Possible values are:<para /> - Automatic: The popup Y position is automatically determined by the popup host.<para /> - Up: The popup is displayed on the top side of the parent<para /> - Down: The popup is displayed on the bottom side of the parent<para /> - Align Tops: Aligns the popup top side with the parent top side.<para /> - Align Bottoms: Aligns the popup bottom side with the parent bottom side.<para /> - Align Centers: Aligns the popup center with the parent center.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.PopupOpenDelay">
            <Summary>Gets or sets the delay (in milliseconds) that must ellapse prior to deffered popup open.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.PopupCloseDelay">
            <Summary>Gets or sets the delay (in milliseconds) that must ellapse prior to deffered popup close.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDateTimeBoxControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NDockPanelControl">
            <summary>
            Represents an NDockPanelControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NDockPanelControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.HorizontalSpacing">
            <Summary>Gets or sets the minimal horizontal spacing between the arranged items</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.VerticalSpacing">
            <Summary>Gets or sets the minimal vertical spacing between the arranged items</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.UniformWidths">
            <Summary>Gets or sets the way in which the items are resized in the X dimension prior to being measured or arranged. By default set to None, which means that cells are initially having their desired widths.<para />Possible values are:<para /> - None: The cells size in the respective dimension is not equal.<para /> - Max: The cells size in the respective dimension is equal to the max of all cells.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.UniformHeights">
            <Summary>Gets or sets the way in which the items are resized in the Y dimension prior to being measured or arranged. By default set to None, which means that cells are initially having their desired heights.<para />Possible values are:<para /> - None: The cells size in the respective dimension is not equal.<para /> - Max: The cells size in the respective dimension is equal to the max of all cells.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NDockPanelControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NFillSplitButtonControl">
            <summary>
            Represents an NFillSplitButtonControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NFillSplitButtonControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.SelectedValue">
            <Summary>Gets or sets the selected value. The selected value is updated from the result of the drop down editing.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.HasAutomaticButton">
            <Summary>Gets or sets whether the drop down shows an Automatic toggle button. When the button is checked, the selected value Automatic flag is raised to true. By default set to true.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.HasNoneButton">
            <Summary>Gets or sets whether the drop down shows a None toggle button. When the button is checked, the selected value is updated to the value provided by the GetNoneValue protected method. By default set to true.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.HasMoreOptionsButton">
            <Summary>Gets or sets whether the drop down shows a More Options button. By default set to true.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.Image">
            <Summary>Gets or sets the image shown in the action button of this split button.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.MoreOptionsImage">
            <Summary>Gets or sets the image shown in the "More Options..." button of the split button popup.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.DropDownButtonPosition">
            <Summary>Gets or sets position of the drop down button. By default set to right.<para />Possible values are:<para /> - Right: The drop down button is positioned to the right of the drop down edit content.<para /> - Bottom: The drop down button is positioned under the drop down edit content.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.WindowX">
            <Summary>Gets or sets the window X coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.WindowY">
            <Summary>Gets or sets the window Y coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.WindowWidth">
            <Summary>Gets or sets the window Width. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.WindowHeight">
            <Summary>Gets or sets the window Height. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.WindowBackgroundFill">
            <Summary>Gets or sets the background of the window area.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.IsPopupOpened">
            <Summary>Gets whether the hosted popup window is currently opened or not. The value of this property is automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.MaxPopupHeight">
            <Summary>Gets or sets the maximum height of the popup window.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.MaxPopupWidth">
            <Summary>Gets or sets the maximum width of the popup window.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.PopupXResize">
            <Summary>Gets or sets the X resizing of the popup.<para />Possible values are:<para /> - Desired: The popup width/height is equal to its desired width/height<para /> - Parent: The popup width/height is equal to the popup parent width/height<para /> - Max of Desired and Parent: The popup width/height is the maximum of the popup parent width/height and the popup desired width/height.<para /> - Min of Desired and Parent: The popup width/height is the minimum of the popup parent width/height and the popup desired width/height.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.PopupYResize">
            <Summary>Gets or sets the Y resizing of the popup.<para />Possible values are:<para /> - Desired: The popup width/height is equal to its desired width/height<para /> - Parent: The popup width/height is equal to the popup parent width/height<para /> - Max of Desired and Parent: The popup width/height is the maximum of the popup parent width/height and the popup desired width/height.<para /> - Min of Desired and Parent: The popup width/height is the minimum of the popup parent width/height and the popup desired width/height.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.PopupXPosition">
            <Summary>Gets or sets the X positioning of the popup relatively to this element screen bounds.<para />Possible values are:<para /> - Automatic: The popup X position is automatically determined by the popup host.<para /> - Left: The popup is displayed on the left side of the parent<para /> - Right: The popup is displayed on the right side of the parent<para /> - Align Lefts: Aligns the popup left side with the parent left side.<para /> - Align Rights: Aligns the popup right side with the parent right side.<para /> - Align Centers: Aligns the popup center with the parent center.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.PopupYPosition">
            <Summary>Gets or sets the Y positioning of the popup relatively to this element screen bounds.<para />Possible values are:<para /> - Automatic: The popup Y position is automatically determined by the popup host.<para /> - Up: The popup is displayed on the top side of the parent<para /> - Down: The popup is displayed on the bottom side of the parent<para /> - Align Tops: Aligns the popup top side with the parent top side.<para /> - Align Bottoms: Aligns the popup bottom side with the parent bottom side.<para /> - Align Centers: Aligns the popup center with the parent center.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.PopupOpenDelay">
            <Summary>Gets or sets the delay (in milliseconds) that must ellapse prior to deffered popup open.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.PopupCloseDelay">
            <Summary>Gets or sets the delay (in milliseconds) that must ellapse prior to deffered popup close.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NFillSplitButtonControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NGroupBoxControl">
            <summary>
            Represents an NGroupBoxControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NGroupBoxControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.Symbol">
            <Summary>Gets or sets the tree view item symbol.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.Expandable">
            <Summary>Gets or sets whether the group box is expandable by the user or not.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.IsMouseOverSymbol">
            <Summary>Gets whether the mouse is currently over the symbol or not. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.HeaderOffset">
            <Summary>Gets or sets the header offset</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.Expanded">
            <Summary>Gets or sets the checked state of the toggle button.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.HeaderContentRelation">
            <Summary>Gets or sets the relation between the header and the content in the area of this widget.<para />Possible values are:<para /> - Overlay: Specifies that header and content share the same space.<para /> - Header above Content: Specifies that header is displayed vertically above content.<para /> - Content above Header: Specifies that content is displayed vertically above header.<para /> - Header before Content: Specifies that header is displayed horizontally before content.<para /> - Content before Header: Specifies that content is displayed horizontally before header.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.Spacing">
            <Summary>Gets or sets the spacing between the header and content elemnets</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.ContentPadding">
            <Summary>Gets or sets the padding applied to the content element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NGroupBoxControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NHsbColorPickerControl">
            <summary>
            Represents an NHsbColorPickerControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NHsbColorPickerControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.HuePosition">
            <Summary>Gets or sets the relative position of the Hue bar in this HSB box color picker. The supported values are Left, Top, Right (the default value) and Bottom.<para />Possible values are:<para /> - Left: Left side.<para /> - Top: Top side.<para /> - Right: Right side.<para /> - Bottom: Bottom side.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.Spacing">
            <Summary>Gets or sets the spacing between the Saturation-Brightness color box and the Hue bar.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.SelectedColor">
            <Summary>Gets or sets the value of the SelectedColor property.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbColorPickerControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl">
            <summary>
            Represents an NHsbWheelColorPickerControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.SelectedColor">
            <Summary>Gets or sets the selected color.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.UpdateWhileDragging">
            <Summary>Gets or sets whether the selected color should be updated while the user drags the Hue or Saturation-Brightness selectors. If set to false the selected color is updated when the user releases the left mouse button. By default set to true.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.HueSelectorSectorAngle">
            <Summary>Gets or sets the sector angle of the hue selector, which defines the sector (arc) of the wheel occupied by the hue selector.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.HueWheelWidthPercent">
            <Summary>Gets or sets the hue wheel width percent, which defines the width of the hue wheel relative to the hue wheel outer radius.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.HueSelectorExtendPercent">
            <Summary>Gets or sets the extend of the hue selector pointers, measured as a percent of the hue wheel width.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.SBTriangleMarginsPercent">
            <Summary>Gets or sets the margins applied to the SB triangle, measures as a percent of the hue wheel inner radius.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.SBSelectorRadiusPercent">
            <Summary>Gets or sets the radius percent for the SB selector circle, measured as a percent of the hue wheel inner radius.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NHsbWheelColorPickerControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NImageBoxControl">
            <summary>
            Represents an NImageBoxControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NImageBoxControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.Image">
            <Summary>Gets or sets the imagebox's image.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.ImageRenderMode">
            <Summary>Gets/Sets the image render mode of this image box. By default set to Original, which renders the image as it is originally defined.<para />Possible values are:<para /> - Original: The image is rendered as it is originally defined.<para /> - Inverted Colors: The image is rendered with inverted colors.<para /> - Inverted Brightness: The image brightnesss is inverted.<para /> - Inverted Shades of Gray: The image is rendered with inverted shades of gray.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.ImageMapping">
            <Summary>Gets or sets the way in which the image is mapped to the content area of the box, when the box is painted.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NImageBoxControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NLabelControl">
            <summary>
            Represents an NLabelControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NLabelControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.Text">
            <Summary>Gets or sets the text</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.TextAlignment">
            <Summary>Gets or sets the text alignment<para />Possible values are:<para /> - Top Left: Top left.<para /> - Top Center: Top center.<para /> - Top Right: Top right.<para /> - Middle Left: Middle left.<para /> - Middle Center: Middle center.<para /> - Middle Right: Middle right.<para /> - Bottom Left: Bottom left.<para /> - Bottom Center: Bottom center.<para /> - Bottom Right: Bottom right.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.TextWrapMode">
            <Summary>Gets / sets the text wrap mode<para />Possible values are:<para /> - Word Wrap: Text is wrapped inside the formatting rectangle<para /> - Clip: Text outside the formatting rectangle is clipped<para /> - Ellipsis: Text that lies outside the formatting rectangle is replaced with ellipsis<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLabelControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NLinkLabelControl">
            <summary>
            Represents an NLinkLabelControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NLinkLabelControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.LinkUrl">
            <Summary>Gets/Sets the URL associated with this link label. By default set to null.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.IsVisited">
            <Summary>Gets/Sets whether the link has been visited. Automatically set to true when the link is clicked. By default set to false.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.Text">
            <Summary>Gets or sets the text</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.TextAlignment">
            <Summary>Gets or sets the text alignment<para />Possible values are:<para /> - Top Left: Top left.<para /> - Top Center: Top center.<para /> - Top Right: Top right.<para /> - Middle Left: Middle left.<para /> - Middle Center: Middle center.<para /> - Middle Right: Middle right.<para /> - Bottom Left: Bottom left.<para /> - Bottom Center: Bottom center.<para /> - Bottom Right: Bottom right.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.TextWrapMode">
            <Summary>Gets / sets the text wrap mode<para />Possible values are:<para /> - Word Wrap: Text is wrapped inside the formatting rectangle<para /> - Clip: Text outside the formatting rectangle is clipped<para /> - Ellipsis: Text that lies outside the formatting rectangle is replaced with ellipsis<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NLinkLabelControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NListBoxControl">
            <summary>
            Represents an NListBoxControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NListBoxControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.Selection">
            <Summary>Gets or sets the list box selection</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.IntegralVScroll">
            <Summary>Gets or sets whether the vertical scrolling behavior is integral. When set to true the vertical scrollbar will scroll on descrete items, and its thumb will be sized to the count of currently visible items. When set to false the vertical scrollbar will work in smooth scrolling mode and its thumb will be sized to the currently visible space from the items area.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.HScrollMode">
            <Summary>Gets or sets the scroll mode, which specifies the visibility of the horizontal scrollbar.<para />Possible values are:<para /> - Never: The scrolling is never allowed.<para /> - Always: The scrolling is always allowed.<para /> - When Needed: The scrolling is allowed when needed.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.VScrollMode">
            <Summary>Gets or sets the scroll mode, which specifies the visibility of the vertical scrollbar.<para />Possible values are:<para /> - Never: The scrolling is never allowed.<para /> - Always: The scrolling is always allowed.<para /> - When Needed: The scrolling is allowed when needed.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.NoScrollHAlign">
            <Summary>Gets or sets the horizontal content alignment, when a horizontal scrollbar is not, or must not be displayed.<para />Possible values are:<para /> - None: The viewport is not horizontally aligned. The viewport origin is used.<para /> - Center: The viewport is horizontally inside the window.<para /> - Left: The viewport left side is aligned to the window left side.<para /> - Right: The viewport right side is aligned to the window right side.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.NoScrollVAlign">
            <Summary>Gets or sets the vertical content alignment, when a vertical scrollbar is not, or must not be displayed.<para />Possible values are:<para /> - None: The viewport is not vertically aligned. The viewport origin is used.<para /> - Center: The viewport is vertically inside the window.<para /> - Top: The viewport top side is aligned to the window top side.<para /> - Bottom: The viewport bottom side is aligned to the window bottom side.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.SmallHScrollChange">
            <Summary>Gets or sets the small horizontal scroll change.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.SmallVScrollChange">
            <Summary>Gets or sets the small vertical scroll change.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.ViewportOriginX">
            <Summary>Gets or sets the viewport origin X value, which is the point from the content coordinate system that is mapped to the window origin.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.ViewportOriginY">
            <Summary>Gets or sets the viewport origin Y value, which is the point from the content coordinate system that is mapped to the window origin.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.ViewportOriginSnapToPixel">
            <Summary>Gets or sets whether the viewport origin is snapped to exact pixel values. By default true.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.IsScrolling">
            <Summary>Gets whether the viewport is currently being continuosly scrolled, either by dragging the scrollbar thumbs or by pressing the scrollbar arrows. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.WindowX">
            <Summary>Gets the window X coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.WindowY">
            <Summary>Gets the window Y coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.WindowWidth">
            <Summary>Gets the window Width. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.WindowHeight">
            <Summary>Gets the window Height. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.WindowBackgroundFill">
            <Summary>Gets or sets the background of the window area.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NListBoxControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NMenuBarControl">
            <summary>
            Represents an NMenuBarControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NMenuBarControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.Text">
            <Summary>Gets or sets the name of the command bar. The name appears in the pendant menu and as title in the command bar floater.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.Orientation">
            <Summary>Gets whether this is command bar is vertically arranged. By default set to false. Automatically updated by Nevron when this bar is added to a command bars lane.<para />Possible values are:<para /> - Horizontal: Horizontal orientation.<para /> - Vertical: Vertical orientation.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.LanePosition">
            <Summary>Gets or sets the preferred position of the bar inside the lane. It is specified relatively to the content area of the lane.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.FillLane">
            <Summary>Gets or sets whether the command bar fills the lane, when it is the only command bar inside it. When set to true the command bar cannot be dragged to a lane that contains other command bars and also other command bars cannot be dragged to the lane in which it resides. By default set to false.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.StackFillMode">
            <Summary>Gets or sets the fill mode to apply on this command bar items. Valid only if this command bar is not wrappable ( set to false).<para />Possible values are:<para /> - None: The stack does not attempt to fill the available area.<para /> - Equal: The stack increases the items size with equal amounts to fill the available area.<para /> - Proportional: The stack increases the items size with proportional amounts to fill the available area.<para /> - First: The stack increases the items size in forward order until the stack fills the available area.<para /> - Last: The stack increases the items size in reverse order until the stack fills the available area.<para /> - Justify: The stack increases the spacing between the items to fill the available area.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.StackFitMode">
            <Summary>Gets or sets the fit mode to apply on this command bar items. Valid only if this command bar is not wrappable ( set to false).<para />Possible values are:<para /> - None: The stack does not attempt to fit the available area.<para /> - Equal: The stack decreases the items size with equal amounts to fit the available area.<para /> - Proportional: The stack decreases the items size with proportional amounts to fit the available area.<para /> - First: The stack decreases the items size in forward order until the stack fits the available area.<para /> - Last: The stack decreases the items size in reverse order until the stack fits the available area.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.Wrappable">
            <Summary>Gets or sets whether the command bar wraps its items or not when docked. When set to false the command bar will arrange the items in a single lane in command bar flow direction. When set to false the command bar will arrange the items in multiple lanes in command bar flow direction. When the bar is floating it is always wrappable. By default set to false.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.HasHiddenItems">
            <Summary>Gets whether the command bar has hidden items or not. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.AllowDock">
            <Summary>Gets or sets whether this command bar can be docked or redocked, if it is floating. A command bar can always be redocked, if it is closed.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.AllowFloat">
            <Summary>Gets or sets whether this command bar can float, if it is docked. A command bar can always be refloated, if it is closed.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.AllowClose">
            <Summary>Gets or sets whether this command bar can be closed.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.FloatingAnchor">
            <Summary>Gets or sets the floating anchor, which is a point in local coordinates of the floating window header and is used to align the dragged floating window to the current mouse position. Automatically updated by Nevron when the user starts dragging the floater and reset when the user starts dragging the command bar in the dock.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.FloatingWidth">
            <Summary>Gets or sets the width of the floating window created for the command bar, when it is made to float. By default set to NaN, meaning that the window is automatically sized to fit the command bar content. The value of this property is updated when the user resizes the floating window by grabbing its sides. The height of the floating window is always automatically calculated.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.RedockLaneRef">
            <Summary>Gets or sets a reference to the lane, at which the command bar needs to be placed, when redocked. Automatically updated by Nevron, when the command bar starts to be dragged or was docked when closed.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.RedockLanePosition">
            <Summary>Gets or sets the offset part of the LanePosition, at which the command bar needs to be placed, when redocked. Automatically updated by Nevron, when the command bar starts to be dragged or was docked when closed.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.RefloatLocation">
            <Summary>Gets or sets the position of the floater window, at which to refloat the command bar. Automatically updated by Nevron, when the floater start to be dragged or was floating when closed.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.ReopenMode">
            <Summary>Gets or sets the mode in which to reopen a closed command bar. Automatically updated by Nevron when the command bar is closed.<para />Possible values are:<para /> - Redock: Redocks the bar.<para /> - Refloat: Refloats the bar.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.HasOpenedPopup">
            <Summary>Gets or sets whether at least one of the menu bar items has its menu opened. The value of this property is automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.OpenPopupsOnMouseIn">
            <Summary>Gets or sets whether the popup windows of the command bar items are opened when the mouse enters them. By default set to false, meaning that you normally have to click a popup host to open its popup window.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.ClosePopupsOnMouseOut">
            <Summary>Gets or sets whether the popup windows of the command bar items should be automatically closed when the mouse is no longer inside them. By default set to false, meaning that the popup window will stay open, until another popup is shown, or the popup loses activation (e.g. user clicks away).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuBarControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NMenuSplitButtonControl">
            <summary>
            Represents an NMenuSplitButtonControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NMenuSplitButtonControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.SelectedIndex">
            <Summary>Gets or sets the the index of the currently selected menu item.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.DropDownButtonPosition">
            <Summary>Gets or sets position of the drop down button. By default set to right.<para />Possible values are:<para /> - Right: The drop down button is positioned to the right of the drop down edit content.<para /> - Bottom: The drop down button is positioned under the drop down edit content.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.WindowX">
            <Summary>Gets or sets the window X coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.WindowY">
            <Summary>Gets or sets the window Y coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.WindowWidth">
            <Summary>Gets or sets the window Width. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.WindowHeight">
            <Summary>Gets or sets the window Height. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.WindowBackgroundFill">
            <Summary>Gets or sets the background of the window area.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.IsPopupOpened">
            <Summary>Gets whether the hosted popup window is currently opened or not. The value of this property is automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.MaxPopupHeight">
            <Summary>Gets or sets the maximum height of the popup window.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.MaxPopupWidth">
            <Summary>Gets or sets the maximum width of the popup window.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.PopupXResize">
            <Summary>Gets or sets the X resizing of the popup.<para />Possible values are:<para /> - Desired: The popup width/height is equal to its desired width/height<para /> - Parent: The popup width/height is equal to the popup parent width/height<para /> - Max of Desired and Parent: The popup width/height is the maximum of the popup parent width/height and the popup desired width/height.<para /> - Min of Desired and Parent: The popup width/height is the minimum of the popup parent width/height and the popup desired width/height.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.PopupYResize">
            <Summary>Gets or sets the Y resizing of the popup.<para />Possible values are:<para /> - Desired: The popup width/height is equal to its desired width/height<para /> - Parent: The popup width/height is equal to the popup parent width/height<para /> - Max of Desired and Parent: The popup width/height is the maximum of the popup parent width/height and the popup desired width/height.<para /> - Min of Desired and Parent: The popup width/height is the minimum of the popup parent width/height and the popup desired width/height.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.PopupXPosition">
            <Summary>Gets or sets the X positioning of the popup relatively to this element screen bounds.<para />Possible values are:<para /> - Automatic: The popup X position is automatically determined by the popup host.<para /> - Left: The popup is displayed on the left side of the parent<para /> - Right: The popup is displayed on the right side of the parent<para /> - Align Lefts: Aligns the popup left side with the parent left side.<para /> - Align Rights: Aligns the popup right side with the parent right side.<para /> - Align Centers: Aligns the popup center with the parent center.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.PopupYPosition">
            <Summary>Gets or sets the Y positioning of the popup relatively to this element screen bounds.<para />Possible values are:<para /> - Automatic: The popup Y position is automatically determined by the popup host.<para /> - Up: The popup is displayed on the top side of the parent<para /> - Down: The popup is displayed on the bottom side of the parent<para /> - Align Tops: Aligns the popup top side with the parent top side.<para /> - Align Bottoms: Aligns the popup bottom side with the parent bottom side.<para /> - Align Centers: Aligns the popup center with the parent center.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.PopupOpenDelay">
            <Summary>Gets or sets the delay (in milliseconds) that must ellapse prior to deffered popup open.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.PopupCloseDelay">
            <Summary>Gets or sets the delay (in milliseconds) that must ellapse prior to deffered popup close.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NMenuSplitButtonControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NNavigationBarControl">
            <summary>
            Represents an NNavigationBarControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NNavigationBarControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.SelectedIndex">
            <Summary>Gets or sets the selected index.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.VisibleHeadersCount">
            <Summary>Gets or sets the number of pane headers from the start of the Panes collection that are considered "visible"</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.HeadersPadding">
            <Summary>Gets or sets the padding that is applied to the headers stack.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.HeadersSpacing">
            <Summary>Gets or sets the spacing between the headers.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.IconsPadding">
            <Summary>Gets or sets the padding that is applied to the icons stack.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.IconsSpacing">
            <Summary>Gets or sets the spacing between the icons.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNavigationBarControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NNumericUpDownControl">
            <summary>
            Represents an NNumericUpDownControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NNumericUpDownControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.DecimalPlaces">
            <Summary>Gets or sets the number of digits shown after the decimal point. By default set to 0, which means that the numeric up down supports only whole numbers.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.Step">
            <Summary>Gets or sets the value of the Step property. By default set to 1.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.DefaultSizeMeasureValue">
            <Summary>Gets or sets a value that is used to measure the default size of the numeric up down.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.WheelIncDecMode">
            <Summary>Gets or sets the mode in which the numeric up down increases or decreases its value, when the user rotates the mouse wheel inside it. By default set to Always.<para />Possible values are:<para /> - Always: The numeric up-down always increases/decreases the value when the users rotates the mouse wheel over it.<para /> - Never: The numeric up-down never increases/decreases the value when the users rotates the mouse wheel over it.<para /> - When Focused: The numeric up-down increases/decreases the value when the users rotates the mouse wheel over it and the numeric up-down is focused.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.TextSelectionMode">
            <Summary>Gets or sets whether the caret will maintain its caret decimal position when updating the up down value with the up/down spinner<para />Possible values are:<para /> - Reset on Change: Resets the position on value change<para /> - Maintain Decimal Position: Maintains the relatieve decimal position of the caret on value change<para /> - Select Text: Selects the text on value change<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.Orientation">
            <Summary>Gets or sets whether the increase/decrease buttons are horizontally or verticall arranged.<para />Possible values are:<para /> - Horizontal: Horizontal orientation.<para /> - Vertical: Vertical orientation.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.WindowX">
            <Summary>Gets or sets the window X coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.WindowY">
            <Summary>Gets or sets the window Y coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.WindowWidth">
            <Summary>Gets or sets the window Width. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.WindowHeight">
            <Summary>Gets or sets the window Height. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.WindowBackgroundFill">
            <Summary>Gets or sets the background of the window area.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.Minimum">
            <Summary>Gets or sets the range minimum.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.Maximum">
            <Summary>Gets or sets the range maximum.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.Value">
            <Summary>Gets or sets the value.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NNumericUpDownControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NPairBoxControl">
            <summary>
            Represents an NPairBoxControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NPairBoxControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.BoxesRelation">
            <Summary>Gets or sets the pair box relation. By default set to Box1BeforeBox2.<para />Possible values are:<para /> - Overlay: Specifies that box1 and box2 share the same space.<para /> - Box 1 above Box 2: Specifies that box1 is displayed vertically above box2.<para /> - Box 2 above Box 1: Specifies that box2 is displayed vertically above box1.<para /> - Box 1 before Box 2: Specifies that box1 is displayed horizontally before box2.<para /> - Box 2 before Box 1: Specifies that box2 is displayed horizontally before box1.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.FillMode">
            <Summary>Gets or sets the fill mode of the stack layout the 2 boxes are layouted with. Has effect only if BoxesRelation is not set to Overlay.<para />Possible values are:<para /> - None: The stack does not attempt to fill the available area.<para /> - Equal: The stack increases the items size with equal amounts to fill the available area.<para /> - Proportional: The stack increases the items size with proportional amounts to fill the available area.<para /> - First: The stack increases the items size in forward order until the stack fills the available area.<para /> - Last: The stack increases the items size in reverse order until the stack fills the available area.<para /> - Justify: The stack increases the spacing between the items to fill the available area.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.FitMode">
            <Summary>Gets or sets the fit mode of the stack layout the 2 boxes are layouted with. Has effect only if BoxesRelation is not set to Overlay.<para />Possible values are:<para /> - None: The stack does not attempt to fit the available area.<para /> - Equal: The stack decreases the items size with equal amounts to fit the available area.<para /> - Proportional: The stack decreases the items size with proportional amounts to fit the available area.<para /> - First: The stack decreases the items size in forward order until the stack fits the available area.<para /> - Last: The stack decreases the items size in reverse order until the stack fits the available area.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.Spacing">
            <Summary>Gets or sets the spacing between the boxes of this pair box.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPairBoxControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NPaletteColorPickerControl">
            <summary>
            Represents an NPaletteColorPickerControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NPaletteColorPickerControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.Palette">
            <Summary>Gets or sets the color palette shown by the picker.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.MaxNumberOfColumns">
            <Summary>Gets or sets the maximum number of columns. By default set to 10.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.HorizontalSpacing">
            <Summary>Gets or sets the minimal horizontal spacing between the arranged items.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.VerticalSpacing">
            <Summary>Gets or sets the minimal vertical spacing between the arranged items.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.CyclicKeyboardNavigation">
            <Summary>Determines whether the first cell should be highlighted when the user is at the last cell and presses the "Navigate to Next Cell" key or whether the last cell should be highlighted when the user is at the first cell and presses the "Navigate to Previous Cell" key. By default set to true.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.SelectedIndex">
            <Summary>Gets or sets the index of the selected item owned by this group. If no item is selected, the value of this property is -1.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NPaletteColorPickerControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NProgressBarControl">
            <summary>
            Represents an NProgressBarControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NProgressBarControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.Mode">
            <Summary>Gets/Sets the progress bar mode. By default set to Determinate.<para />Possible values are:<para /> - Determinate: Determinate mode (default).<para /> - Indeterminate: Indeterminate mode.<para /> - Buffered: Buferred mode.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.WidgetStyle">
            <Summary>Gets/Sets the style of the progress bar.<para />Possible values are:<para /> - Horizontal: A horizontally oriented rectangular progress bar.<para /> - Vertical: A vertically oriented rectangular progress bar.<para /> - Circular: A circular progress bar.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.LabelStyle">
            <Summary>Gets/Sets the progress label style.<para />Possible values are:<para /> - Hidden: The label will not be shown.<para /> - Value: The label will show the current value.<para /> - Factor: The label will show the current value as a factor of the progress bar range, i.e. as a number from 0 to 1.<para /> - Percent: The label will show the current value as a percent of the progress bar range, i.e. as a number from 0 to 100 followed by the '%' sign.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.BufferedValue">
            <Summary>Gets/Sets the buffered value of the progress bar. Taken into account only when is set to .</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.RimWidthPercent">
            <Summary>Gets/Sets the width of the rim of a circular progress bar relative to the radius of the circular progress bar. Taken into account only when is set to . By default set to 50%.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.IndeterminatePartSizePercent">
            <Summary>Gets/Sets the size of the completed part when in Indeterminate mode in percents of the total progress bar length. By default set to 25%.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.AnimationSpeed">
            <Summary>Gets/Sets the animation speed in Indeterminate mode in percents per second of the total progress bar length. By default set to 2%.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.Minimum">
            <Summary>Gets or sets the range minimum.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.Maximum">
            <Summary>Gets or sets the range maximum.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.Value">
            <Summary>Gets or sets the value.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NProgressBarControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NRadioButtonControl">
            <summary>
            Represents an NRadioButtonControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NRadioButtonControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.SymbolContentRelation">
            <Summary>Gets or sets the symbol/content relation of this button.<para />Possible values are:<para /> - Overlay: Specifies that the symbol and the content share the same space.<para /> - Symbol above Content: Specifies that the symbol is displayed vertically above the content.<para /> - Content above Symbol: Specifies that the content is displayed vertically above the symbol.<para /> - Symbol before Content: Specifies that the symbol is displayed horizontally before the content.<para /> - Content before Symbol: Specifies that the content is displayed horizontally before the symbol.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.Spacing">
            <Summary>Gets or sets the spacing between the symbol and the content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.Checked">
            <Summary>Gets or sets the checked state of the toggle button.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.ToggleCheckedOnClick">
            <Summary>Determines whether to toggle the checked state of the toggle button when clicked. By default set to true.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.ClickMode">
            <Summary>Gets or sets the click mode of the button<para />Possible values are:<para /> - Press: The button is clicked when the button is pressed<para /> - Release: The button is clicked when the button is released<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.IsPressed">
            <Summary>Gets whether the button is pressed. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRadioButtonControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NRangeSliderControl">
            <summary>
            Represents an NRangeSliderControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NRangeSliderControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.BeginValue">
            <Summary>Gets or sets the begin value of this range slider.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.EndValue">
            <Summary>Gets or sets the end value of this range slider.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.Orientation">
            <Summary>Gets or sets the slider's orientation.<para />Possible values are:<para /> - Horizontal: Horizontal orientation.<para /> - Vertical: Vertical orientation.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.TicksPlacement">
            <Summary>Gets or sets the way the ticks are placed.<para />Possible values are:<para /> - None: Ticks are not drawn.<para /> - Top Left: Ticks are drawn on the top side of a horizontal axis or on the left side of a vertical axis.<para /> - Bottom Right: Ticks are drawn on the bottom side of a horizontal axis or on the right side of a vertical axis.<para /> - Both: Ticks are drawn on both sides of the axis.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.TicksLength">
            <Summary>Gets or sets the length of a tick. Valid only if TicksPlacement is not set to None.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.TicksInterval">
            <Summary>Gets or sets the value range at which ticks are drawn.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.TicksStroke">
            <Summary>Gets or sets the stroking of the ticks.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.SmallChange">
            <Summary>Gets or sets the small change.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.LargeChange">
            <Summary>Gets or sets the large change.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.SnappingStep">
            <Summary>Gets or sets the snapping step. By default set to 0, which means that no snapping will be applied when the thumb is dragged.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.Minimum">
            <Summary>Gets or sets the range minimum.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.Maximum">
            <Summary>Gets or sets the range maximum.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.Value">
            <Summary>Gets or sets the value.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRangeSliderControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NRepeatButtonControl">
            <summary>
            Represents an NRepeatButtonControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NRepeatButtonControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.Delay">
            <Summary>Gets or sets the amount of time (in milliseconds), that the button waits while it is pressed before it starts repeating clicks.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.Interval">
            <Summary>Gets or sets the amount of time (in milliseconds), between repeating clicks once repeating clicks starts.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.ClickMode">
            <Summary>Gets or sets the click mode of the button<para />Possible values are:<para /> - Press: The button is clicked when the button is pressed<para /> - Release: The button is clicked when the button is released<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.IsPressed">
            <Summary>Gets whether the button is pressed. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRepeatButtonControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NRibbonControl">
            <summary>
            Represents an NRibbonControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NRibbonControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NRibbonControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NScrollContentControl">
            <summary>
            Represents an NScrollContentControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NScrollContentControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.HScrollMode">
            <Summary>Gets or sets the scroll mode, which specifies the visibility of the horizontal scrollbar.<para />Possible values are:<para /> - Never: The scrolling is never allowed.<para /> - Always: The scrolling is always allowed.<para /> - When Needed: The scrolling is allowed when needed.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.VScrollMode">
            <Summary>Gets or sets the scroll mode, which specifies the visibility of the vertical scrollbar.<para />Possible values are:<para /> - Never: The scrolling is never allowed.<para /> - Always: The scrolling is always allowed.<para /> - When Needed: The scrolling is allowed when needed.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.NoScrollHAlign">
            <Summary>Gets or sets the horizontal content alignment, when a horizontal scrollbar is not, or must not be displayed.<para />Possible values are:<para /> - None: The viewport is not horizontally aligned. The viewport origin is used.<para /> - Center: The viewport is horizontally inside the window.<para /> - Left: The viewport left side is aligned to the window left side.<para /> - Right: The viewport right side is aligned to the window right side.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.NoScrollVAlign">
            <Summary>Gets or sets the vertical content alignment, when a vertical scrollbar is not, or must not be displayed.<para />Possible values are:<para /> - None: The viewport is not vertically aligned. The viewport origin is used.<para /> - Center: The viewport is vertically inside the window.<para /> - Top: The viewport top side is aligned to the window top side.<para /> - Bottom: The viewport bottom side is aligned to the window bottom side.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.SmallHScrollChange">
            <Summary>Gets or sets the small horizontal scroll change.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.SmallVScrollChange">
            <Summary>Gets or sets the small vertical scroll change.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.ViewportOriginX">
            <Summary>Gets or sets the viewport origin X value, which is the point from the content coordinate system that is mapped to the window origin.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.ViewportOriginY">
            <Summary>Gets or sets the viewport origin Y value, which is the point from the content coordinate system that is mapped to the window origin.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.ViewportOriginSnapToPixel">
            <Summary>Gets or sets whether the viewport origin is snapped to exact pixel values. By default true.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.IsScrolling">
            <Summary>Gets whether the viewport is currently being continuosly scrolled, either by dragging the scrollbar thumbs or by pressing the scrollbar arrows. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.WindowX">
            <Summary>Gets the window X coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.WindowY">
            <Summary>Gets the window Y coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.WindowWidth">
            <Summary>Gets the window Width. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.WindowHeight">
            <Summary>Gets the window Height. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.WindowBackgroundFill">
            <Summary>Gets or sets the background of the window area.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NScrollContentControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NSliderControl">
            <summary>
            Represents an NSliderControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NSliderControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.Orientation">
            <Summary>Gets or sets the slider's orientation.<para />Possible values are:<para /> - Horizontal: Horizontal orientation.<para /> - Vertical: Vertical orientation.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.TicksPlacement">
            <Summary>Gets or sets the way the ticks are placed.<para />Possible values are:<para /> - None: Ticks are not drawn.<para /> - Top Left: Ticks are drawn on the top side of a horizontal axis or on the left side of a vertical axis.<para /> - Bottom Right: Ticks are drawn on the bottom side of a horizontal axis or on the right side of a vertical axis.<para /> - Both: Ticks are drawn on both sides of the axis.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.TicksLength">
            <Summary>Gets or sets the length of a tick. Valid only if TicksPlacement is not set to None.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.TicksInterval">
            <Summary>Gets or sets the value range at which ticks are drawn.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.TicksStroke">
            <Summary>Gets or sets the stroking of the ticks.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.SmallChange">
            <Summary>Gets or sets the small change.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.LargeChange">
            <Summary>Gets or sets the large change.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.SnappingStep">
            <Summary>Gets or sets the snapping step. By default set to 0, which means that no snapping will be applied when the thumb is dragged.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.Minimum">
            <Summary>Gets or sets the range minimum.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.Maximum">
            <Summary>Gets or sets the range maximum.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.Value">
            <Summary>Gets or sets the value.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSliderControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NSplitterControl">
            <summary>
            Represents an NSplitterControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NSplitterControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.Orientation">
            <Summary>Specifies direction in which the splitter panes and thumb(s) are oriented. By default set to horizontal, which means that splitter panes and thumb(s) are placed from left to right.<para />Possible values are:<para /> - Horizontal: Horizontal orientation.<para /> - Vertical: Vertical orientation.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.ResizeWhileDragging">
            <Summary>Gets or sets whether to resize the panes while the thumb is being dragged or not. When set to false the panes are resized when the thumb is released. By default set to false.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.ResizeStep">
            <Summary>Gets or sets the step with which the current splitter position can be changed.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSplitterControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NStackPanelControl">
            <summary>
            Represents an NStackPanelControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NStackPanelControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.FillMode">
            <Summary>Gets or sets the stack fill mode, which determines the fill behavior of the stack layout in the layout direction. By default set to ENStackFillMode.None.<para />Possible values are:<para /> - None: The stack does not attempt to fill the available area.<para /> - Equal: The stack increases the items size with equal amounts to fill the available area.<para /> - Proportional: The stack increases the items size with proportional amounts to fill the available area.<para /> - First: The stack increases the items size in forward order until the stack fills the available area.<para /> - Last: The stack increases the items size in reverse order until the stack fills the available area.<para /> - Justify: The stack increases the spacing between the items to fill the available area.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.FitMode">
            <Summary>Gets or sets the stack fit mode, which determines the fit behavior of the stack layout in the layout direction when the fill mode is set to none and there is not enough space for the layouted objects. By default set to ENStackFitMode.None.<para />Possible values are:<para /> - None: The stack does not attempt to fit the available area.<para /> - Equal: The stack decreases the items size with equal amounts to fit the available area.<para /> - Proportional: The stack decreases the items size with proportional amounts to fit the available area.<para /> - First: The stack decreases the items size in forward order until the stack fits the available area.<para /> - Last: The stack decreases the items size in reverse order until the stack fits the available area.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.Direction">
            <Summary>Gets or sets the direction in which the layout arranges adjacent cells. By default set to TopToBottom.<para />Possible values are:<para /> - Top to Bottom: The layout is directed vertically, starting from the top and expanding downwards.<para /> - Bottom to Top: The layout is directed vertically, starting from the bottom and expanding upwards.<para /> - Left to Right: The layout is directed horizontally, starting from the left and expanding to the right.<para /> - Right to Left: The layout is directed horizontally, starting from the right and expanding to the left.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.HorizontalSpacing">
            <Summary>Gets or sets the minimal horizontal spacing between the arranged items</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.VerticalSpacing">
            <Summary>Gets or sets the minimal vertical spacing between the arranged items</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.UniformWidths">
            <Summary>Gets or sets the way in which the items are resized in the X dimension prior to being measured or arranged. By default set to None, which means that cells are initially having their desired widths.<para />Possible values are:<para /> - None: The cells size in the respective dimension is not equal.<para /> - Max: The cells size in the respective dimension is equal to the max of all cells.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.UniformHeights">
            <Summary>Gets or sets the way in which the items are resized in the Y dimension prior to being measured or arranged. By default set to None, which means that cells are initially having their desired heights.<para />Possible values are:<para /> - None: The cells size in the respective dimension is not equal.<para /> - Max: The cells size in the respective dimension is equal to the max of all cells.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStackPanelControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NStrokeSplitButtonControl">
            <summary>
            Represents an NStrokeSplitButtonControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.SelectedValue">
            <Summary>Gets or sets the selected value. The selected value is updated from the result of the drop down editing.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.HasAutomaticButton">
            <Summary>Gets or sets whether the drop down shows an Automatic toggle button. When the button is checked, the selected value Automatic flag is raised to true. By default set to true.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.HasNoneButton">
            <Summary>Gets or sets whether the drop down shows a None toggle button. When the button is checked, the selected value is updated to the value provided by the GetNoneValue protected method. By default set to true.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.HasMoreOptionsButton">
            <Summary>Gets or sets whether the drop down shows a More Options button. By default set to true.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.Image">
            <Summary>Gets or sets the image shown in the action button of this split button.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.MoreOptionsImage">
            <Summary>Gets or sets the image shown in the "More Options..." button of the split button popup.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.DropDownButtonPosition">
            <Summary>Gets or sets position of the drop down button. By default set to right.<para />Possible values are:<para /> - Right: The drop down button is positioned to the right of the drop down edit content.<para /> - Bottom: The drop down button is positioned under the drop down edit content.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.WindowX">
            <Summary>Gets or sets the window X coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.WindowY">
            <Summary>Gets or sets the window Y coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.WindowWidth">
            <Summary>Gets or sets the window Width. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.WindowHeight">
            <Summary>Gets or sets the window Height. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.WindowBackgroundFill">
            <Summary>Gets or sets the background of the window area.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.IsPopupOpened">
            <Summary>Gets whether the hosted popup window is currently opened or not. The value of this property is automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.MaxPopupHeight">
            <Summary>Gets or sets the maximum height of the popup window.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.MaxPopupWidth">
            <Summary>Gets or sets the maximum width of the popup window.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.PopupXResize">
            <Summary>Gets or sets the X resizing of the popup.<para />Possible values are:<para /> - Desired: The popup width/height is equal to its desired width/height<para /> - Parent: The popup width/height is equal to the popup parent width/height<para /> - Max of Desired and Parent: The popup width/height is the maximum of the popup parent width/height and the popup desired width/height.<para /> - Min of Desired and Parent: The popup width/height is the minimum of the popup parent width/height and the popup desired width/height.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.PopupYResize">
            <Summary>Gets or sets the Y resizing of the popup.<para />Possible values are:<para /> - Desired: The popup width/height is equal to its desired width/height<para /> - Parent: The popup width/height is equal to the popup parent width/height<para /> - Max of Desired and Parent: The popup width/height is the maximum of the popup parent width/height and the popup desired width/height.<para /> - Min of Desired and Parent: The popup width/height is the minimum of the popup parent width/height and the popup desired width/height.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.PopupXPosition">
            <Summary>Gets or sets the X positioning of the popup relatively to this element screen bounds.<para />Possible values are:<para /> - Automatic: The popup X position is automatically determined by the popup host.<para /> - Left: The popup is displayed on the left side of the parent<para /> - Right: The popup is displayed on the right side of the parent<para /> - Align Lefts: Aligns the popup left side with the parent left side.<para /> - Align Rights: Aligns the popup right side with the parent right side.<para /> - Align Centers: Aligns the popup center with the parent center.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.PopupYPosition">
            <Summary>Gets or sets the Y positioning of the popup relatively to this element screen bounds.<para />Possible values are:<para /> - Automatic: The popup Y position is automatically determined by the popup host.<para /> - Up: The popup is displayed on the top side of the parent<para /> - Down: The popup is displayed on the bottom side of the parent<para /> - Align Tops: Aligns the popup top side with the parent top side.<para /> - Align Bottoms: Aligns the popup bottom side with the parent bottom side.<para /> - Align Centers: Aligns the popup center with the parent center.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.PopupOpenDelay">
            <Summary>Gets or sets the delay (in milliseconds) that must ellapse prior to deffered popup open.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.PopupCloseDelay">
            <Summary>Gets or sets the delay (in milliseconds) that must ellapse prior to deffered popup close.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NStrokeSplitButtonControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NSymbolBoxControl">
            <summary>
            Represents an NSymbolBoxControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NSymbolBoxControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.Symbol">
            <Summary>Gets or sets the symbol.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.SymbolColorMode">
            <Summary>Determines whether the color of the symbol should change when the TextFill property of the button changes. This makes it easy to create symbol buttons with symbols whose color depends on the currently applied theme. By default set to OriginalSymbolColor.<para />Possible values are:<para /> - Original Symbol Color: Default symbol color mode - symbol color is not changed.<para /> - Text Fill: Symbol color is changed to that of the symbol box text fill.<para /> - Text Fill when Disabled: Symbol color is changed to that of the symbol box text fill only when the symbol box is disabled.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NSymbolBoxControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NTabControl">
            <summary>
            Represents an NTabControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NTabControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.SelectedIndex">
            <Summary>Gets or sets the selected index</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.HeadersPosition">
            <Summary>Gets or sets the headers position<para />Possible values are:<para /> - Left: The tab page headers are positioned on the left side of the tab widget.<para /> - Top: The tab page headers are positioned on the top side of the tab widget.<para /> - Right: The tab page headers are positioned on the right side of the tab widget.<para /> - Bottom: The tab page headers are positioned on the bottom side of the tab widget.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.HeadersSpacing">
            <Summary>Gets or sets the spacing between the headers in the flow direction defined by the HeadersPosition property.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.HeadersAlignment">
            <Summary>Gets or sets the alignment of the tab headers.<para />Possible values are:<para /> - Near: Near<para /> - Center: Center<para /> - Far: Far<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.HeadersMode">
            <Summary>Gets or sets the headers positioning mode<para />Possible values are:<para /> - Inner: The tab page headers are placed inside the tab widget.<para /> - Middle: Half of each tab page header is placed inside the tab widget and the other half is placed outside of it.<para /> - Outer: The tab page headers are placed outside the tab widget.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.SizeToSelectedPage">
            <Summary>Gets or sets whether the tab should measure only to the currently selected page or to all pages. By default false.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.SizeToHeaders">
            <Summary>Gets or sets whether the tab should measure to the tab headers in the breath dimension or not. By default true</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.CycleTabPages">
            <Summary>Gets or sets whether whether to cycle trough tab pages when the user presses the Tab or Shift Tab key and the last or first page is reached.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTabControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NTableFlowPanelControl">
            <summary>
            Represents an NTableFlowPanelControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NTableFlowPanelControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.MaxOrdinal">
            <Summary>Gets or sets the maximum number of items in a single lane: - if the Direction is set to LeftToRight or RightToLeft, the MaxOrdinal specifies the column count. - if the Direction is set to TopToBottom or BottomToTop, the MaxOrdinal specifies the row count.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.RowFillMode">
            <Summary>Gets or sets the mode in which the layout fills the available area in the rows dimension.<para />Possible values are:<para /> - None: The stack does not attempt to fill the available area.<para /> - Equal: The stack increases the items size with equal amounts to fill the available area.<para /> - Proportional: The stack increases the items size with proportional amounts to fill the available area.<para /> - First: The stack increases the items size in forward order until the stack fills the available area.<para /> - Last: The stack increases the items size in reverse order until the stack fills the available area.<para /> - Justify: The stack increases the spacing between the items to fill the available area.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.RowFitMode">
            <Summary>Gets or sets the mode in which the layout fits into the available area in the rows dimension.<para />Possible values are:<para /> - None: The stack does not attempt to fit the available area.<para /> - Equal: The stack decreases the items size with equal amounts to fit the available area.<para /> - Proportional: The stack decreases the items size with proportional amounts to fit the available area.<para /> - First: The stack decreases the items size in forward order until the stack fits the available area.<para /> - Last: The stack decreases the items size in reverse order until the stack fits the available area.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.ColFillMode">
            <Summary>Gets or sets the mode in which the layout fills the available area in the cols dimension.<para />Possible values are:<para /> - None: The stack does not attempt to fill the available area.<para /> - Equal: The stack increases the items size with equal amounts to fill the available area.<para /> - Proportional: The stack increases the items size with proportional amounts to fill the available area.<para /> - First: The stack increases the items size in forward order until the stack fills the available area.<para /> - Last: The stack increases the items size in reverse order until the stack fills the available area.<para /> - Justify: The stack increases the spacing between the items to fill the available area.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.ColFitMode">
            <Summary>Gets or sets the mode in which the layout fits into the available area in the cols dimension.<para />Possible values are:<para /> - None: The stack does not attempt to fit the available area.<para /> - Equal: The stack decreases the items size with equal amounts to fit the available area.<para /> - Proportional: The stack decreases the items size with proportional amounts to fit the available area.<para /> - First: The stack decreases the items size in forward order until the stack fits the available area.<para /> - Last: The stack decreases the items size in reverse order until the stack fits the available area.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.Inverted">
            <Summary>Gets or sets if the lanes are layouted from the first to the last (by default) or from the last to the first (inverted). By default set to false.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.Direction">
            <Summary>Gets or sets the direction in which the layout arranges adjacent cells. By default set to TopToBottom.<para />Possible values are:<para /> - Top to Bottom: The layout is directed vertically, starting from the top and expanding downwards.<para /> - Bottom to Top: The layout is directed vertically, starting from the bottom and expanding upwards.<para /> - Left to Right: The layout is directed horizontally, starting from the left and expanding to the right.<para /> - Right to Left: The layout is directed horizontally, starting from the right and expanding to the left.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.HorizontalSpacing">
            <Summary>Gets or sets the minimal horizontal spacing between the arranged items</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.VerticalSpacing">
            <Summary>Gets or sets the minimal vertical spacing between the arranged items</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.UniformWidths">
            <Summary>Gets or sets the way in which the items are resized in the X dimension prior to being measured or arranged. By default set to None, which means that cells are initially having their desired widths.<para />Possible values are:<para /> - None: The cells size in the respective dimension is not equal.<para /> - Max: The cells size in the respective dimension is equal to the max of all cells.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.UniformHeights">
            <Summary>Gets or sets the way in which the items are resized in the Y dimension prior to being measured or arranged. By default set to None, which means that cells are initially having their desired heights.<para />Possible values are:<para /> - None: The cells size in the respective dimension is not equal.<para /> - Max: The cells size in the respective dimension is equal to the max of all cells.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTableFlowPanelControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NTextBoxControl">
            <summary>
            Represents an NTextBoxControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NTextBoxControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.Text">
            <Summary>Gets or sets the text</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.RecordHistory">
            <Summary>Gets or sets whether the text box will record history</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.ClearHistoryOnFocusOut">
            <Summary>Gets or sets whether the text box should clear its history when the user moves the focus out of the control</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.Hint">
            <Summary>Gets or sets the text displayed when the text box is empty.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.HintFill">
            <Summary>Gets or sets the fill style of the text box hint.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.SelectionBackgroundFill">
            <Summary>Gets/Sets the background fill of the selection.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.SelectionTextFill">
            <Summary>Gets/Sets the text fill of the selection.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.TextAlign">
            <Summary>Gets or sets the text alignment<para />Possible values are:<para /> - Left: Left alignment for text<para /> - Center: Center alignment for text<para /> - Right: Right alignment for text<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.AlwaysShowSelection">
            <Summary>Gets or sets whether to show selection even when the text box does not have focus.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.AlwaysShowCaret">
            <Summary>Gets or sets whether to show the caret even when the text box does not have focus.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.SelectAllOnFocus">
            <Summary>Gets or sets whether the text box will perform a select all operation when it gains focus</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.Multiline">
            <Summary>Gets or sets whether the text can span more than one line.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.WordWrap">
            <Summary>Gets or sets whether lines are automatically word wrapped when multiline is enabled</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.AcceptsTab">
            <Summary>Gets or set whether tab characters are accepted as input.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.AcceptsEnter">
            <Summary>Gets or set whether return characters are accepted as input.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.ReadOnly">
            <Summary>Gets or sets whether the text box allows the user to modify the text</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.PasswordChar">
            <Summary>Gets or sets the password char</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.CharacterCasing">
            <Summary>Gets or sets the current character casing<para />Possible values are:<para /> - Normal: Characters retain thier original casing<para /> - Upper Case: All characters are converted to upper case<para /> - Lower Case: All characters are converted to lower case<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.Direction">
            <Summary>Gets / sets the text direction<para />Possible values are:<para /> - Left to Right: Left to right direction<para /> - Right to Left: Right to left direction<para /> - Automatic: Automatic direction<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.ShowCaret">
            <Summary>Gets / sets whether the text box must show the caret</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.AllowContextPopup">
            <Summary>Gets or sets whether the text box can display a context popup with the clipboard operations (Cut, Copy and Paste).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.MaxLength">
            <Summary>Gets/Sets the maximum length of the text accepted by this text box. By default set to Int32.MaxValue.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.HScrollMode">
            <Summary>Gets or sets the scroll mode, which specifies the visibility of the horizontal scrollbar.<para />Possible values are:<para /> - Never: The scrolling is never allowed.<para /> - Always: The scrolling is always allowed.<para /> - When Needed: The scrolling is allowed when needed.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.VScrollMode">
            <Summary>Gets or sets the scroll mode, which specifies the visibility of the vertical scrollbar.<para />Possible values are:<para /> - Never: The scrolling is never allowed.<para /> - Always: The scrolling is always allowed.<para /> - When Needed: The scrolling is allowed when needed.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.NoScrollHAlign">
            <Summary>Gets or sets the horizontal content alignment, when a horizontal scrollbar is not, or must not be displayed.<para />Possible values are:<para /> - None: The viewport is not horizontally aligned. The viewport origin is used.<para /> - Center: The viewport is horizontally inside the window.<para /> - Left: The viewport left side is aligned to the window left side.<para /> - Right: The viewport right side is aligned to the window right side.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.NoScrollVAlign">
            <Summary>Gets or sets the vertical content alignment, when a vertical scrollbar is not, or must not be displayed.<para />Possible values are:<para /> - None: The viewport is not vertically aligned. The viewport origin is used.<para /> - Center: The viewport is vertically inside the window.<para /> - Top: The viewport top side is aligned to the window top side.<para /> - Bottom: The viewport bottom side is aligned to the window bottom side.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.SmallHScrollChange">
            <Summary>Gets or sets the small horizontal scroll change.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.SmallVScrollChange">
            <Summary>Gets or sets the small vertical scroll change.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.ViewportOriginX">
            <Summary>Gets or sets the viewport origin X value, which is the point from the content coordinate system that is mapped to the window origin.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.ViewportOriginY">
            <Summary>Gets or sets the viewport origin Y value, which is the point from the content coordinate system that is mapped to the window origin.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.ViewportOriginSnapToPixel">
            <Summary>Gets or sets whether the viewport origin is snapped to exact pixel values. By default true.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.IsScrolling">
            <Summary>Gets whether the viewport is currently being continuosly scrolled, either by dragging the scrollbar thumbs or by pressing the scrollbar arrows. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.WindowX">
            <Summary>Gets the window X coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.WindowY">
            <Summary>Gets the window Y coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.WindowWidth">
            <Summary>Gets the window Width. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.WindowHeight">
            <Summary>Gets the window Height. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.WindowBackgroundFill">
            <Summary>Gets or sets the background of the window area.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTextBoxControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NToggleButtonControl">
            <summary>
            Represents an NToggleButtonControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NToggleButtonControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.Checked">
            <Summary>Gets or sets the checked state of the toggle button.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.ToggleCheckedOnClick">
            <Summary>Determines whether to toggle the checked state of the toggle button when clicked. By default set to true.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.ClickMode">
            <Summary>Gets or sets the click mode of the button<para />Possible values are:<para /> - Press: The button is clicked when the button is pressed<para /> - Release: The button is clicked when the button is released<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.IsPressed">
            <Summary>Gets whether the button is pressed. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToggleButtonControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NToolBarControl">
            <summary>
            Represents an NToolBarControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NToolBarControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.Text">
            <Summary>Gets or sets the name of the command bar. The name appears in the pendant menu and as title in the command bar floater.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.Orientation">
            <Summary>Gets whether this is command bar is vertically arranged. By default set to false. Automatically updated by Nevron when this bar is added to a command bars lane.<para />Possible values are:<para /> - Horizontal: Horizontal orientation.<para /> - Vertical: Vertical orientation.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.LanePosition">
            <Summary>Gets or sets the preferred position of the bar inside the lane. It is specified relatively to the content area of the lane.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.FillLane">
            <Summary>Gets or sets whether the command bar fills the lane, when it is the only command bar inside it. When set to true the command bar cannot be dragged to a lane that contains other command bars and also other command bars cannot be dragged to the lane in which it resides. By default set to false.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.StackFillMode">
            <Summary>Gets or sets the fill mode to apply on this command bar items. Valid only if this command bar is not wrappable ( set to false).<para />Possible values are:<para /> - None: The stack does not attempt to fill the available area.<para /> - Equal: The stack increases the items size with equal amounts to fill the available area.<para /> - Proportional: The stack increases the items size with proportional amounts to fill the available area.<para /> - First: The stack increases the items size in forward order until the stack fills the available area.<para /> - Last: The stack increases the items size in reverse order until the stack fills the available area.<para /> - Justify: The stack increases the spacing between the items to fill the available area.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.StackFitMode">
            <Summary>Gets or sets the fit mode to apply on this command bar items. Valid only if this command bar is not wrappable ( set to false).<para />Possible values are:<para /> - None: The stack does not attempt to fit the available area.<para /> - Equal: The stack decreases the items size with equal amounts to fit the available area.<para /> - Proportional: The stack decreases the items size with proportional amounts to fit the available area.<para /> - First: The stack decreases the items size in forward order until the stack fits the available area.<para /> - Last: The stack decreases the items size in reverse order until the stack fits the available area.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.Wrappable">
            <Summary>Gets or sets whether the command bar wraps its items or not when docked. When set to false the command bar will arrange the items in a single lane in command bar flow direction. When set to false the command bar will arrange the items in multiple lanes in command bar flow direction. When the bar is floating it is always wrappable. By default set to false.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.HasHiddenItems">
            <Summary>Gets whether the command bar has hidden items or not. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.AllowDock">
            <Summary>Gets or sets whether this command bar can be docked or redocked, if it is floating. A command bar can always be redocked, if it is closed.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.AllowFloat">
            <Summary>Gets or sets whether this command bar can float, if it is docked. A command bar can always be refloated, if it is closed.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.AllowClose">
            <Summary>Gets or sets whether this command bar can be closed.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.FloatingAnchor">
            <Summary>Gets or sets the floating anchor, which is a point in local coordinates of the floating window header and is used to align the dragged floating window to the current mouse position. Automatically updated by Nevron when the user starts dragging the floater and reset when the user starts dragging the command bar in the dock.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.FloatingWidth">
            <Summary>Gets or sets the width of the floating window created for the command bar, when it is made to float. By default set to NaN, meaning that the window is automatically sized to fit the command bar content. The value of this property is updated when the user resizes the floating window by grabbing its sides. The height of the floating window is always automatically calculated.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.RedockLaneRef">
            <Summary>Gets or sets a reference to the lane, at which the command bar needs to be placed, when redocked. Automatically updated by Nevron, when the command bar starts to be dragged or was docked when closed.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.RedockLanePosition">
            <Summary>Gets or sets the offset part of the LanePosition, at which the command bar needs to be placed, when redocked. Automatically updated by Nevron, when the command bar starts to be dragged or was docked when closed.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.RefloatLocation">
            <Summary>Gets or sets the position of the floater window, at which to refloat the command bar. Automatically updated by Nevron, when the floater start to be dragged or was floating when closed.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.ReopenMode">
            <Summary>Gets or sets the mode in which to reopen a closed command bar. Automatically updated by Nevron when the command bar is closed.<para />Possible values are:<para /> - Redock: Redocks the bar.<para /> - Refloat: Refloats the bar.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.HasOpenedPopup">
            <Summary>Gets or sets whether at least one of the menu bar items has its menu opened. The value of this property is automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.OpenPopupsOnMouseIn">
            <Summary>Gets or sets whether the popup windows of the command bar items are opened when the mouse enters them. By default set to false, meaning that you normally have to click a popup host to open its popup window.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.ClosePopupsOnMouseOut">
            <Summary>Gets or sets whether the popup windows of the command bar items should be automatically closed when the mouse is no longer inside them. By default set to false, meaning that the popup window will stay open, until another popup is shown, or the popup loses activation (e.g. user clicks away).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NToolBarControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NTreeViewControl">
            <summary>
            Represents an NTreeViewControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NTreeViewControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.SelectedPath">
            <Summary>Gets or sets the path to the selected item</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.IntegralVScroll">
            <Summary>Gets or sets whether the vertical scrolling behavior is integral. When set to true the vertical scrollbar will scroll on descrete items, and its thumb will be sized to the count of currently visible items. When set to false the vertical scrollbar will work in smooth scrolling mode and its thumb will be sized to the currently visible space from the items area.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.HScrollMode">
            <Summary>Gets or sets the scroll mode, which specifies the visibility of the horizontal scrollbar.<para />Possible values are:<para /> - Never: The scrolling is never allowed.<para /> - Always: The scrolling is always allowed.<para /> - When Needed: The scrolling is allowed when needed.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.VScrollMode">
            <Summary>Gets or sets the scroll mode, which specifies the visibility of the vertical scrollbar.<para />Possible values are:<para /> - Never: The scrolling is never allowed.<para /> - Always: The scrolling is always allowed.<para /> - When Needed: The scrolling is allowed when needed.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.NoScrollHAlign">
            <Summary>Gets or sets the horizontal content alignment, when a horizontal scrollbar is not, or must not be displayed.<para />Possible values are:<para /> - None: The viewport is not horizontally aligned. The viewport origin is used.<para /> - Center: The viewport is horizontally inside the window.<para /> - Left: The viewport left side is aligned to the window left side.<para /> - Right: The viewport right side is aligned to the window right side.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.NoScrollVAlign">
            <Summary>Gets or sets the vertical content alignment, when a vertical scrollbar is not, or must not be displayed.<para />Possible values are:<para /> - None: The viewport is not vertically aligned. The viewport origin is used.<para /> - Center: The viewport is vertically inside the window.<para /> - Top: The viewport top side is aligned to the window top side.<para /> - Bottom: The viewport bottom side is aligned to the window bottom side.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.SmallHScrollChange">
            <Summary>Gets or sets the small horizontal scroll change.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.SmallVScrollChange">
            <Summary>Gets or sets the small vertical scroll change.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.ViewportOriginX">
            <Summary>Gets or sets the viewport origin X value, which is the point from the content coordinate system that is mapped to the window origin.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.ViewportOriginY">
            <Summary>Gets or sets the viewport origin Y value, which is the point from the content coordinate system that is mapped to the window origin.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.ViewportOriginSnapToPixel">
            <Summary>Gets or sets whether the viewport origin is snapped to exact pixel values. By default true.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.IsScrolling">
            <Summary>Gets whether the viewport is currently being continuosly scrolled, either by dragging the scrollbar thumbs or by pressing the scrollbar arrows. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.WindowX">
            <Summary>Gets the window X coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.WindowY">
            <Summary>Gets the window Y coordinate. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.WindowWidth">
            <Summary>Gets the window Width. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.WindowHeight">
            <Summary>Gets the window Height. Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.WindowBackgroundFill">
            <Summary>Gets or sets the background of the window area.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NTreeViewControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="T:Nevron.Nov.WpfControls.NWrapFlowPanelControl">
            <summary>
            Represents an NWrapFlowPanelControl control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NWrapFlowPanelControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.LaneFillMode">
            <Summary>Gets or sets the mode in which the layout tries to fill the extra space in each lane.<para />Possible values are:<para /> - None: The stack does not attempt to fill the available area.<para /> - Equal: The stack increases the items size with equal amounts to fill the available area.<para /> - Proportional: The stack increases the items size with proportional amounts to fill the available area.<para /> - First: The stack increases the items size in forward order until the stack fills the available area.<para /> - Last: The stack increases the items size in reverse order until the stack fills the available area.<para /> - Justify: The stack increases the spacing between the items to fill the available area.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.FillMode">
            <Summary>Gets or sets the mode in which the layout tries to fill the layout area, when the desired size of the generated lanes is smaller than the layout area.<para />Possible values are:<para /> - None: The stack does not attempt to fill the available area.<para /> - Equal: The stack increases the items size with equal amounts to fill the available area.<para /> - Proportional: The stack increases the items size with proportional amounts to fill the available area.<para /> - First: The stack increases the items size in forward order until the stack fills the available area.<para /> - Last: The stack increases the items size in reverse order until the stack fills the available area.<para /> - Justify: The stack increases the spacing between the items to fill the available area.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.FitMode">
            <Summary>Gets or sets the mode in which the layout tries to fit into the layout area, when the desired size of the generated lanes is larger than the layout area.<para />Possible values are:<para /> - None: The stack does not attempt to fit the available area.<para /> - Equal: The stack decreases the items size with equal amounts to fit the available area.<para /> - Proportional: The stack decreases the items size with proportional amounts to fit the available area.<para /> - First: The stack decreases the items size in forward order until the stack fits the available area.<para /> - Last: The stack decreases the items size in reverse order until the stack fits the available area.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.Inverted">
            <Summary>Gets or sets if the lanes are layouted from the first to the last (by default) or from the last to the first (inverted). By default set to false.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.Direction">
            <Summary>Gets or sets the direction in which the layout arranges adjacent cells. By default set to TopToBottom.<para />Possible values are:<para /> - Top to Bottom: The layout is directed vertically, starting from the top and expanding downwards.<para /> - Bottom to Top: The layout is directed vertically, starting from the bottom and expanding upwards.<para /> - Left to Right: The layout is directed horizontally, starting from the left and expanding to the right.<para /> - Right to Left: The layout is directed horizontally, starting from the right and expanding to the left.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.HorizontalSpacing">
            <Summary>Gets or sets the minimal horizontal spacing between the arranged items</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.VerticalSpacing">
            <Summary>Gets or sets the minimal vertical spacing between the arranged items</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.UniformWidths">
            <Summary>Gets or sets the way in which the items are resized in the X dimension prior to being measured or arranged. By default set to None, which means that cells are initially having their desired widths.<para />Possible values are:<para /> - None: The cells size in the respective dimension is not equal.<para /> - Max: The cells size in the respective dimension is equal to the max of all cells.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.UniformHeights">
            <Summary>Gets or sets the way in which the items are resized in the Y dimension prior to being measured or arranged. By default set to None, which means that cells are initially having their desired heights.<para />Possible values are:<para /> - None: The cells size in the respective dimension is not equal.<para /> - Max: The cells size in the respective dimension is equal to the max of all cells.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.WidgetVisibility">
            <Summary>Gets or sets the widget visibility.<para />Possible values are:<para /> - Visible: The element is visible and occupies layout space<para /> - Hidden: The element is not visible, but occupies layout space<para /> - Collapsed: The element is not visible and does not occupy layout space<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.Margins">
            <Summary>Gets or sets the margins.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.HorizontalPlacement">
            <Summary>Gets or sets the horizontal placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Left: The content is aligned to the left side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Right: The content is aligned to the right side of the content holder.<para /> - Fit: The content is resized horizontally to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.VerticalPlacement">
            <Summary>Gets or sets the vertical placement of the widget, relative to the arrange slot allocated to the box.<para />Possible values are:<para /> - Top: The content is aligned to the top side of the content holder.<para /> - Center: The content is aligned to the center of the content holder.<para /> - Bottom: The content is aligned to the bottom side of the content holder.<para /> - Fit: The content is resized vertically to the respective content holder size.<para /></Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.ArrangeSlot">
            <Summary>Gets or sets the arrange slot of the widget (in parent coordinates).</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.PreferredWidth">
            <Summary>Gets or sets the suggested width of the element. If the value of this property is NaN the default width and desired width of the box are automatically computed. Otherwise both the default width and the desired width are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.PreferredHeight">
            <Summary>Gets or sets the suggested height of the element. If the value of this property is NaN the default height and desired height of the box are automatically computed. Otherwise both the default height and the desired height are equal to this value. By default set to NaN.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.WidgetMinWidth">
            <Summary>Gets or sets the minimal width of the element. The box default and desired width is always smaller or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.WidgetMinHeight">
            <Summary>Gets or sets the minimal height of the element. The box default and desired height is always larger or equal to this value, except in the case when the element is collapsed. By default set to 0.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.WidgetMaxWidth">
            <Summary>Gets or sets the max width of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.WidgetMaxHeight">
            <Summary>Gets or sets the max height of the element</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.DefaultWidth">
            <Summary>Gets the default width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.DefaultHeight">
            <Summary>Gets the default height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.DesiredWidth">
            <Summary>Gets the desired width of the element (in parent coordinates). Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.DesiredHeight">
            <Summary>Gets the desired height of the element. (in parent coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.WidgetWidth">
            <Summary>Gets the Width of the box (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.WidgetHeight">
            <Summary>Gets the Height of the element (in local coordinates) Automatically updated by Nevron.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.X">
            <Summary>Gets or sets the X coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.Y">
            <Summary>Gets or sets the Y coordinate of the element box left-top corner in respect to the parent coordinate system.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.WidgetBorderThickness">
            <Summary>Gets or sets the thickness of the box border sides.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.WidgetPadding">
            <Summary>Gets or sets the padding applied to the box content.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.BackgroundFill">
            <Summary>Gets or sets the background.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.TextFill">
            <Summary>Gets or sets the text fill.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.Border">
            <Summary>Gets or sets the border.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.FocusDecorator">
            <Summary>Gets or sets the focus decorator.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.Font">
            <Summary>Gets or sets the font style.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.Enabled">
            <Summary>Gets or sets whether this element is enabled in the UI or not. If a local value has not been set to this property, its value will be inherited by an ancestor element.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.IsDisabled">
            <Summary>Gets whether this element is disabled. The local value of this property is automatically set to true, when the computed value of the Enabled property is false. The local value of this property is automatically cleared to its default false, when the computed value of the Enabled property is true. In this way you can select disabled widgets via styling, by using the ValueEqualsCondition</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.AllowFocus">
            <Summary>Gets or sets whether this widget can be focused</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.AllowMouseCapture">
            <Summary>Gets or sets whether this widget can capture the mouse</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.AllowTouchCapture">
            <Summary>Gets or sets whether this element can capture the touch</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.WidgetAllowDrop">
            <Summary>Gets or sets whether this widget can be used as the target of a drag-and-drop operation</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.WidgetCursor">
            <Summary>Gets or sets the cursor</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.Tooltip">
            <Summary>Gets or sets the tooltip</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.Interactor">
            <Summary>Gets/set the element interactor.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.Commander">
            <Summary>Gets/set the element commander.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.TabStop">
            <Summary>Gets or sets whether the element is included in the tab navigation or not</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.WidgetTabIndex">
            <Summary>Gets or sets the index of the element in the tab navigation list.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.Id">
            <Summary>Gets the id of the element, which uniquely identifies the element inside the owner document. It is automatically assigned when the element is registered in a document and is also automatically set to -1 when the element is unregistered from the document. You can manually assign the next document Id to the element, before it is added to a specific document, by using AssingNextId method.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.UserClass">
            <Summary>Gets or sets the User Class to which the element belongs. This property is usually assigned by the user and is used to group related elements. An element can belong to more than one user classes that should be separated by the ' '(space) character. For example: element.UserClass = "MyClass1 MyClass2" specifies that element belongs to both MyClass1 and MayClass2 classes. The NUserClassCondtion styling condition lets you select elements of a specific user class.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.UserId">
            <Summary>Gets or sets the User Id associated to this element. This property is usually assigned by the user and is used to identify specific elements in the document. Unlike the Id property, the value of this property is not guaranteed to be unique in the document. The NUserIdCondition styling condition lets you select elements with a specific User Id.</Summary>
        </member>
        <member name="P:Nevron.Nov.WpfControls.NWrapFlowPanelControl.WidgetTag">
            <Summary>Gets or sets the node tag, that can be any DOM compliant object. This property is not used by the node itself and is intended to provide users with the ability to attach custom data to the node. Attaching custom data to any node can also be achieved with the help of extendeded properties.</Summary>
        </member>
        <member name="M:Nevron.Nov.WpfControls.NNovControlHelpers.InstallFramework">
            <summary>
            Static constructor
            </summary>
        </member>
    </members>
</doc>
