<?xml version="1.0" encoding="utf-8"?>
<!-- NOTE: This resource contains duplicated names for edge-case unit tests but suppressing MSB3568 does not work. -->
<root>
  <!-- 
        Microsoft ResX Schema

        Version 1.3

        The primary goals of this format is to allow a simple XML format 
        that is mostly human readable. The generation and parsing of the 
        various data types are done through the TypeConverter classes 
        associated with the data types.

        Example:

        ... ado.net/XML headers & schema ...
        <resheader name="resmimetype">text/microsoft-resx</resheader>
        <resheader name="version">1.3</resheader>
        <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
        <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
        <data name="Name1">this is my long string</data>
        <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
        <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
            [base64 mime encoded serialized .NET Framework object]
        </data>
        <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
            [base64 mime encoded string representing a byte array form of the .NET Framework object]
        </data>

        There are any number of "resheader" rows that contain simple 
        name/value pairs.

        Each data row contains a name, and value. The row also contains a 
        type or mimetype. Type corresponds to a .NET class that support 
        text/value conversion through the TypeConverter architecture. 
        Classes that don't support this are serialized and stored with the 
        mimetype set.

        The mimetype is used for serialized objects, and tells the 
        ResXResourceReader how to depersist the object. This is currently not 
        extensible. For a given mimetype the value must be set accordingly:

        Note - application/x-microsoft.net.object.binary.base64 is the format 
        that the ResXResourceWriter will generate, however the reader can 
        read any of the formats listed below.

        mimetype: application/x-microsoft.net.object.binary.base64
        value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

        mimetype: application/x-microsoft.net.object.soap.base64
        value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

        mimetype: application/x-microsoft.net.object.bytearray.base64
        value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->

  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>

  <data name="first">
    <value>1</value>
  </data>

  <data name="second">2</data>

  <data name="empty">
    <value/>
  </data>

  <data name="empty2">
    <value></value>
  </data>

  <!--non-regular null, just value is missing (in designer: string). When re-written by system writer, value is generated so it will be empty-->
  <data name="null">
  </data>

  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <!--regular null, but value is missing-->
  <data name="null2" type="System.Resources.ResXNullRef, System.Windows.Forms">
  </data>

  <!--regular null-->
  <data name="null3" type="System.Resources.ResXNullRef, System.Windows.Forms">
    <value/>
  </data>

  <!--If type is specified, then empty value means null-->
  <data name="null4" type="System.String">
    <value/>
  </data>

  <data name="empty3" type="System.String">
    <value></value>
  </data>

  <!--Duplicated so cached enumerator will return String2 (sensitive) or String3 (insensitive); lazy enumerator String, then String2, then String3-->
  <data name="string" type="System.String">
    <value>String</value>
  </data>

  <data name="string" type="System.String">
    <value>String2</value>
  </data>

  <data name="String" type="System.String">
    <value>String3</value>
  </data>

  <!--System reader: only with AssemblyName[] ctor-->
  <data name="pointAssembly" type="System.Drawing.Point, System.Drawing">
    <value>5, 6</value>
  </data>

  <!--System reader: only with AssemblyName[] ctor-->
  <data name="pointFullName" type="System.Drawing.Point">
    <value>5, 6</value>
  </data>

  <data name="pointAssemblyQualifiedName" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>5, 6</value>
  </data>

  <!--System reader: only with AssemblyName[] ctor, just because there is no space in "System.Drawing.Point,drawing".
      In this case alias will not be resolved, and as a fallback, Point will be searched in all defined assemblies-->
  <assembly alias="drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pointAlias" type="System.Drawing.Point,drawing">
    <value>5, 6</value>
  </data>

  <!--System reader: only with AssemblyName[] ctor-->
  <assembly alias="System.Drawing" name="System.Drawing" />
  <data name="pointAliasValuePartialName" type="System.Drawing.Point,System.Drawing">
    <value>5, 6</value>
  </data>

  <assembly alias="System.Drawing, funny name" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pointAliasValueFunnyName" type="System.Drawing.Point, System.Drawing, funny name">
    <value>5, 6</value>
  </data>

  <assembly alias="DrawingRedefined" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pointAliasRedefinedDrawing" type="System.Drawing.Point, DrawingRedefined">
    <value>5, 6</value>
  </data>

  <!--System reader: only with AssemblyName[] ctor-->
  <data name="uriFullName" type="System.Uri">
    <value>http://test.uri</value>
  </data>

  <assembly alias="DrawingRedefined" name="System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="uriRedefinedAlias" type="System.Uri, DrawingRedefined">
    <value>http://test.uri</value>
  </data>

  <metadata name="string">
    <value>MetaString</value>
  </metadata>
  <metadata name="string">
    <value>MetaString2</value>
  </metadata>
</root>